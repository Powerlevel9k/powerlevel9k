#!/usr/bin/env zsh
# vim:ft=zsh ts=2 sw=2 sts=2 et fenc=utf-8
################################################################
# @title powerlevel9k Default Engine
# @source [powerlevel9k](https://github.com/bhilburn/powerlevel9k)
##
# @authors
#   Ben Hilburn - [@bhilburn](https://github.com/bhilburn)
#   Dominik Ritter - [@dritter](https://github.com/dritter)
#   Christo Kotze - [@onaforeignshore](https://github.com/onaforeignshore)
##
# @info
#   This file contains the default generator for the powerlevel9k project.
##

################################################################
# DEFAULT ENGINE - Synchronous
################################################################

################################################################
# Prompt Segment Constructors
#
# Methodology behind user-defined variables overwriting colors:
#     The first parameter to the segment constructors is the calling function's
#     name. From this function name, we strip the "prompt_"-prefix and
#     uppercase it. This is then prefixed with "P9K_" and suffixed
#     with either "_BACKGROUND" or "_FOREGROUND", thus giving us the variable
#     name. So each new segment is user-overwritten by a variable following
#     this naming convention.
################################################################

# The `CURRENT_BG` variable is used to remember what the last BG color used was
# when building the left-hand prompt. Because the RPROMPT is created from
# right-left but reads the opposite, this isn't necessary for the other side.
CURRENT_BG='NONE'

p9k::set_default last_left_element_index 1
p9k::set_default P9K_WHITESPACE_BETWEEN_LEFT_SEGMENTS " "
p9k::set_default P9K_MIDDLE_WHITESPACE_OF_LEFT_SEGMENTS " "
################################################################
# @description
#   Construct a left prompt segment
##
# @args
#   $1 string Stateful name of the function that was originally invoked (mandatory).
#   $2 integer Index of the segment
#   $3 boolean Whether the segment should be joined
#   $4 string Content of the segment
#   $5 string Visual identifier (must be a key of the icons array)
##
function __p9k_left_prompt_segment() {
  local STATEFUL_NAME="${1}"
  local current_index="${2}"
  # Check if the segment should be joined with the previous one
  local joined=false
  [[ "${3}" == "true" ]] \
      && __p9k_segment_should_be_joined ${current_index} ${last_left_element_index} "$P9K_LEFT_PROMPT_ELEMENTS" && joined=true
  local content
  # Support for bold segment
  [[ -n ${4} ]] && [[ $__P9K_DATA[${STATEFUL_NAME}_BD] == true ]] && content="%B${4}%b" || content="${4}"
  local SEGMENT_ICON="${5}"

  local bg=$__P9K_DATA[${STATEFUL_NAME}_BG]
  local fg=$__P9K_DATA[${STATEFUL_NAME}_FG]

  local left_ws="$__P9K_DATA[${STATEFUL_NAME}_LEFT_LEFT_WHITESPACE]"
  local middle_ws="$__P9K_DATA[${STATEFUL_NAME}_LEFT_MIDDLE_WHITESPACE]"
  local right_ws="$__P9K_DATA[${STATEFUL_NAME}_LEFT_RIGHT_WHITESPACE]"

  if [[ ${CURRENT_BG} != 'NONE' ]]; then # not first segment
    if [[ "${bg}" != "${CURRENT_BG}" ]]; then # background colors are different
      echo -n "${bg}%F${CURRENT_BG#%K}"
      [[ ${joined} == false ]] && echo -n "$__P9K_ICONS[LEFT_SEGMENT_SEPARATOR]${left_ws}"
    else # background colors are the same
      # Middle segment with same color as previous segment
      # We take the current foreground color as color for our
      # subsegment. This should have enough contrast.
      [[ ${joined} == false ]] && echo -n "$__P9K_ICONS[LEFT_SUBSEGMENT_SEPARATOR]${left_ws}"
    fi
  else # First segment

    # Custom symbol for left side of the first segment and
    # custom white space that follows it
    local first_symbol=""
    local first_ws="$__P9K_DATA[FIRST_WHITESPACE]"
    if [[ -n "$P9K_LEFT_PROMPT_FIRST_SEGMENT_START_SYMBOL" ]]; then
      first_symbol="%K{${CURRENT_BG}}%F${bg#%K}$P9K_LEFT_PROMPT_FIRST_SEGMENT_START_SYMBOL"
    fi

    echo -n "${first_symbol}${bg}${first_ws}"
  fi

  # Print the visual identifier and content if any
  local visual_identifier
  [[ -n "${SEGMENT_ICON}" ]] && visual_identifier="$__P9K_DATA[${STATEFUL_NAME}_VI]${SEGMENT_ICON}"
  [[ -n "${content}" ]] && content="${fg}${content}"
  [[ -n "${visual_identifier}" && -n "${content}" ]] && visual_identifier="${visual_identifier}${middle_ws}"
  echo -n "${visual_identifier}${content}${right_ws}"

  CURRENT_BG=$bg
  last_left_element_index=$current_index
}

################################################################
# @description
#   End the left prompt, closes the final segment
##
# @noargs
##
function __p9k_left_prompt_end() {
  if [[ -n ${CURRENT_BG} ]]; then
    echo -n "%k%F${CURRENT_BG#%K}${__P9K_ICONS[LEFT_SEGMENT_SEPARATOR]}"
  else
    echo -n "%k"
  fi
  echo -n "%f${__P9K_ICONS[LEFT_SEGMENT_END_SEPARATOR]}"
  CURRENT_BG=''
}

CURRENT_RIGHT_BG='NONE'

p9k::set_default last_right_element_index 1
p9k::set_default last_right_element_stateful_name ""
p9k::set_default P9K_WHITESPACE_BETWEEN_RIGHT_SEGMENTS " "
p9k::set_default P9K_MIDDLE_WHITESPACE_OF_RIGHT_SEGMENTS " "
################################################################
# @description
#   Construct a right prompt segment
##
# @args
#   $1 string Stateful name of the function that was originally invoked (mandatory).
#   $2 integer Index of the segment
#   $3 boolean Whether the segment should be joined
#   $4 string Content of the segment
#   $5 string Visual identifier (must be a key of the icons array)
##
# @notes
#   No ending for the right prompt segment is needed (unlike the left prompt, above).
##
function __p9k_right_prompt_segment() {
  local STATEFUL_NAME="${1}"
  local current_index="${2}"
  # Check if the segment should be joined with the previous one
  local joined=false
  [[ "${3}" == "true" ]] && __p9k_segment_should_be_joined ${current_index} ${last_right_element_index} "$P9K_RIGHT_PROMPT_ELEMENTS" && joined=true
  local content
  # Support for bold segment
  [[ -n "${4}" ]] && [[ $__P9K_DATA[${STATEFUL_NAME}_BD] == true ]] && content="%B${4}%b" || content="${4}"
  local SEGMENT_ICON="${5}"

  local bg=$__P9K_DATA[${STATEFUL_NAME}_BG]
  local fg=$__P9K_DATA[${STATEFUL_NAME}_FG]

  local left_ws="$__P9K_DATA[${STATEFUL_NAME}_RIGHT_LEFT_WHITESPACE]"
  local middle_ws="$__P9K_DATA[${STATEFUL_NAME}_RIGHT_MIDDLE_WHITESPACE]"
  # Due to how the right prompt segments are built, we need to output
  # the whitespace of the _previous_ segment here.
  local right_ws="$__P9K_DATA[${last_right_element_stateful_name}_RIGHT_RIGHT_WHITESPACE]"

  # If CURRENT_RIGHT_BG is "NONE", we are the first right segment.
  [[ ${CURRENT_RIGHT_BG} == 'NONE' ]] || echo -n "${right_ws}" # print right whitespace of prev segment
  if [[ ${joined} == false ]] || [[ ${CURRENT_RIGHT_BG} == 'NONE' ]]; then
    if [[ "${bg}" != "${CURRENT_RIGHT_BG}" ]]; then
      # Use the new BG color for the foreground with separator
      echo -n "%F${bg#%K}${__P9K_ICONS[RIGHT_SEGMENT_SEPARATOR]}"
    else
      # Middle segment with same color as previous segment
      # We take the current foreground color as color for our
      # subsegment. This should have enough contrast.
      echo -n "${fg}${__P9K_ICONS[RIGHT_SUBSEGMENT_SEPARATOR]}"
    fi
  fi

  echo -n "${bg}${fg}"

  local visual_identifier
  if [[ -n "${SEGMENT_ICON}" ]]; then
    visual_identifier="$__P9K_DATA[${STATEFUL_NAME}_VI]${SEGMENT_ICON}%f"

    [[ "${(L)P9K_RPROMPT_ICON_LEFT}" != "true" ]] \
      && visual_identifier="${middle_ws}${visual_identifier}" \
      || visual_identifier="${visual_identifier}${middle_ws}"
  fi

  # Print whitespace only if segment is not joined or first right segment,
  # however, avoid double-printing whitespace if ${content} is empty
  [[ ${joined} == false ]] || [[ "${CURRENT_RIGHT_BG}" == "NONE" ]] && [[ -n "${content}" ]] && echo -n "${left_ws}"
  # Print segment content and icon, if any
  [[ "${(L)P9K_RPROMPT_ICON_LEFT}" != "true" ]] \
    && echo -n "${content}${visual_identifier}" \
    || echo -n "${visual_identifier}${fg}${content}"

  CURRENT_RIGHT_BG=${bg}
  last_right_element_index=${current_index}
  last_right_element_stateful_name=${STATEFUL_NAME}
}

################################################################
# @description
#   This function wraps `__p9k_left_prompt_segment` and `__p9k_right_prompt_segment`
#   (for compatibility with the async generator).
##
# @args
#   $1 string Name of the function that was originally invoked (mandatory)
#   $2 string State of the segment
#   $3 string Alignment (left|right)
#   $4 integer Index of the segment
#   $5 bool Whether the segment should be joined
#   $6 string Content of the segment
#   $7 string The condition - if the segment should be shown (gets evaluated)
#   $8 string Visual identifier overide - *must* be a named icon string
#   $9 string Background overide
#   $10 string Foreground overide
##
function p9k::prepare_segment() {
  local STATEFUL_NAME="${${(U)1}#PROMPT_}"
  [[ -n "${2}" ]] && STATEFUL_NAME="${STATEFUL_NAME}_${(U)2}"

  # Precompile condition.
  if __p9k_segment_should_be_printed "${STATEFUL_NAME}" "${7}" "${6}"; then
    local SEGMENT_ICON
    if [[ -z "${8}" ]]; then
      SEGMENT_ICON=${__P9K_ICONS[${STATEFUL_NAME}]}
    else
      # check if it is a named icon
      SEGMENT_ICON=${__P9K_ICONS[${8}]}
      # otherwise use it literally
      [[ -z "${SEGMENT_ICON}" ]] && SEGMENT_ICON=$(echo ${8})
    fi

    # Background overide
    [[ -n "${9}" ]] && __P9K_DATA[${STATEFUL_NAME}_BG]="${9}"

    # Foreground overide
    [[ -n "${10}" ]] && __P9K_DATA[${STATEFUL_NAME}_FG]="${10}"

    "__p9k_${3}_prompt_segment" "${STATEFUL_NAME}" "${4}" "${5}" "${6}" "${SEGMENT_ICON}"
  fi
}


################################################################
# Prompt Segment Definitions
################################################################

# The `CURRENT_BG` variable is used to remember what the last BG color used was
# when building the left-hand prompt. Because the RPROMPT is created from
# right-left but reads the opposite, this isn't necessary for the other side.
CURRENT_BG='NONE'

################################################################
# @description
#   The `custom` prompt provides a way for users to invoke commands and display
#   the output in a segment.
##
# @args
#   $1 string Left|Right
#   $2 integer Segment index
#   $3 boolean Whether the segment should be joined
#   $4 string Custom segment name
##
function __p9k_prompt_custom() {
  local STATEFUL_NAME="CUSTOM_${${(U)4}}"
  local command="P9K_${STATEFUL_NAME}"
  local segment_content="$(eval ${(P)command})"

  p9k::register_segment "${STATEFUL_NAME}" "" "white" "black"

  if [[ -n ${segment_content} ]]; then
    p9k::prepare_segment "${STATEFUL_NAME}" "" "$1" $2 $3 "$segment_content"
  fi
}

################################################################
# Prompt processing and drawing
################################################################

###############################################################
# @description
#   This function loops through the left prompt elements and calls
#   the related segment functions.
##
# @noargs
##
function __p9k_build_left_prompt() {
  [[ ${P9K_LEFT_PROMPT_ELEMENTS[1]} == "" ]] && return
  local index=1
  local element joined
  for element in "${P9K_LEFT_PROMPT_ELEMENTS[@]}"; do
    # Check if segment should be joined
    [[ "${element[-7,-1]}" == '_joined' ]] && joined=true || joined=false

    # Remove joined information in direct calls
    element="${element%_joined}"

    # Check if it is a custom command, otherwise interpet it as
    # a prompt.
    if [[ $element[0,7] =~ "custom_" ]]; then
      "__p9k_prompt_custom" "left" "$index" ${joined} $element[8,-1]
    else
      "prompt_$element" "left" "$index" $joined
    fi

    index=$((index + 1))
  done

  __p9k_left_prompt_end
}

###############################################################
# @description
#   This function loops through the right prompt elements and calls
#   the related segment functions.
##
# @noargs
##
function __p9k_build_right_prompt() {
  [[ ${P9K_RIGHT_PROMPT_ELEMENTS[1]:-} == "" ]] && return
  local index=1
  local element joined
  for element in "${P9K_RIGHT_PROMPT_ELEMENTS[@]}"; do
    # Check if segment should be joined
    [[ "${element[-7,-1]}" == '_joined' ]] && joined=true || joined=false

    # Remove joined information in direct calls
    element="${element%_joined}"

    # Check if it is a custom command, otherwise interpet it as a prompt.
    if [[ $element[0,7] =~ "custom_" ]]; then
      "__p9k_prompt_custom" "right" "$index" ${joined} $element[8,-1]
    else
      "prompt_$element" "right" "$index" $joined
    fi

    index=$((index + 1))
  done

  # last whitespace with last segments right symbol, if any
  local last_symbol
  if p9k::defined "P9K_RIGHT_PROMPT_LAST_SEGMENT_END_SYMBOL"; then
    last_symbol="%K{none}%F${CURRENT_RIGHT_BG#%K}${P9K_RIGHT_PROMPT_LAST_SEGMENT_END_SYMBOL}"
  fi

  echo -n "${__P9K_DATA[LAST_WHITESPACE]}${last_symbol}"
}

###############################################################
# @description
#   This function is a hook that runs before the command runs.
#   It sets the start timer.
##
# @noargs
##
function __p9k_preexec() {
  # The Timer is started here, but the end
  # is taken in __p9k_prepare_prompts, as this
  # method is a precmd hook and runs right
  # before the prompt gets rendered. So we
  # can calculate the duration there.
  _P9K_TIMER_START=${EPOCHREALTIME}
}

##############################################################
# @description
#   This function is a hook that is run before __p9k_prepare_prompts.
#   If sets the return value(s) that is/are used in prompt_status.
#   Since we need to get the return value of the last command, this hook
#   has to be run before __p9k_prepare_prompts does.
##
# @noargs
##
function __p9k_save_retvals() {
  RETVAL=$?
  RETVALS=( "$pipestatus[@]" )
}

p9k::set_default P9K_PROMPT_ADD_NEWLINE false
###############################################################
# @description
#   This function is a hook that is run before the prompts are created.
#   If sets all the required variables for the prompts and then
#   calls the prompt segment building functions.
##
# @noargs
##
function __p9k_prepare_prompts() {
  local RPROMPT_PREFIX RPROMPT_SUFFIX

  _P9K_COMMAND_DURATION=$((EPOCHREALTIME - _P9K_TIMER_START))

  # Reset start time
  _P9K_TIMER_START=0x7FFFFFFF

  local LC_ALL="" LC_CTYPE="en_US.UTF-8" # Set the right locale to protect special characters

  if [[ "${P9K_PROMPT_ON_NEWLINE:-}" == true ]]; then
    __p9k_unsafe_PROMPT="${__P9K_ICONS[MULTILINE_FIRST_PROMPT_PREFIX]}%f%b%k$(__p9k_build_left_prompt)
${__P9K_ICONS[MULTILINE_LAST_PROMPT_PREFIX]}"
    if [[ "$P9K_RPROMPT_ON_NEWLINE" != true ]]; then
      # The right prompt should be on the same line as the first line of the left
      # prompt. To do so, there is just a quite ugly workaround: Before zsh draws
      # the RPROMPT, we advise it, to go one line up. At the end of RPROMPT, we
      # advise it to go one line down. See:
      # http://superuser.com/questions/357107/zsh-right-justify-in-ps1
      RPROMPT_PREFIX='%{'$'\e[1A'${P9K_RPROMPT_PREFIX:-}'%}' # one line up
      RPROMPT_SUFFIX='%{'${P9K_RPROMPT_SUFFIX:-}$'\e[1B''%}' # one line down
    else
      RPROMPT_PREFIX='%{'${P9K_RPROMPT_PREFIX:-}'%}'
      RPROMPT_SUFFIX='%{'${P9K_RPROMPT_SUFFIX:-}'%}'
    fi
  else
    __p9k_unsafe_PROMPT="%f%b%k$(__p9k_build_left_prompt)"
    RPROMPT_PREFIX='%{'${P9K_RPROMPT_PREFIX:-}'%}'
    RPROMPT_SUFFIX='%{'${P9K_RPROMPT_SUFFIX:-}'%}'
  fi

  if [[ "${P9K_DISABLE_RPROMPT:-}" != true ]]; then
    __p9k_unsafe_RPROMPT="${RPROMPT_PREFIX}%f%b%k$(__p9k_build_right_prompt)%{${reset_color}%}${RPROMPT_SUFFIX}"
    RPROMPT='$__p9k_unsafe_RPROMPT'
  fi

  # Allow iTerm integration to work
  [[ "${ITERM_SHELL_INTEGRATION_INSTALLED:-}" == "Yes" ]] \
    && __p9k_unsafe_PROMPT="%{$(iterm2_prompt_mark)%}$__p9k_unsafe_PROMPT"

local NEWLINE='
'

  if [[ "${P9K_PROMPT_ADD_NEWLINE:-}" == true ]]; then
    NEWLINES=""
    repeat ${P9K_PROMPT_ADD_NEWLINE_COUNT:-1} { NEWLINES+=${NEWLINE} }
    __p9k_unsafe_PROMPT="$NEWLINES$__p9k_unsafe_PROMPT"
  fi

  # By evaluating $__p9k_unsafe_PROMPT here in __p9k_prepare_prompts we avoid
  # the evaluation of $PROMPT being interrupted.
  # For security $PROMPT is never set directly. This way the prompt render is
  # forced to evaluate the variable and the contents of $__p9k_unsafe_PROMPT
  # are never executed. The same applies to $RPROMPT.
  PROMPT='$__p9k_unsafe_PROMPT'
}

p9k::set_default P9K_IGNORE_TERM_COLORS false
p9k::set_default P9K_IGNORE_TERM_LANG false

###############################################################
# @description
#   This function is a hook into chpwd to add bindkey support.
##
# @noargs
##
function __p9k_ch_pwd() {
  __p9k_prepare_prompts
  __p9k_preexec
}

###############################################################
# @description
#   This function resets the prompt using zle keymap.
##
# @noargs
##
function __p9k_zle_keymap_select () {
  zle reset-prompt
  zle -R
}

###############################################################
# @description
#   This is the main function. It does the necessary checks,
#   loads the required resources and sets the required hooks.
##
# @noargs
##
function prompt_powerlevel9k_setup() {
  # The value below was set to better support 32-bit CPUs.
  # It's the maximum _signed_ integer value on 32-bit CPUs.
  # Please don't change it until 19 January of 2038. ;)

  # Disable false display of command execution time
  _P9K_TIMER_START=0x7FFFFFFF

  # The prompt function will set these prompt_* options after the setup function
  # returns. We need prompt_subst so we can safely run commands in the prompt
  # without them being double expanded and we need prompt_percent to expand the
  # common percent escape sequences.
  prompt_opts=(cr percent sp subst)

  # Borrowed from promptinit, sets the prompt options in case the theme was
  # not initialized via promptinit.
  setopt noprompt{bang,cr,percent,sp,subst} "prompt${^prompt_opts[@]}"

  # Display a warning if the terminal does not support 256 colors
  __p9k_term_colors

  # If the terminal `LANG` is set to `C`, this theme will not work at all.
  if [[ $P9K_IGNORE_TERM_LANG == false ]]; then
      local term_lang
      term_lang=$(echo $LANG)
      if [[ ${term_lang} == 'C' ]]; then
          print -P "\t%F{red}WARNING!%f Your terminal's 'LANG' is set to 'C', which breaks this theme!"
          print -P "\t%F{red}WARNING!%f Please set your 'LANG' to a UTF-8 language, like 'en_US.UTF-8'"
          print -P "\t%F{red}WARNING!%f _before_ loading this theme in your \~\.zshrc. Putting"
          print -P "\t%F{red}WARNING!%f %F{blue}export LANG=\"en_US.UTF-8\"%f at the top of your \~\/.zshrc is sufficient."
      fi
  fi

  if ! p9k::defined P9K_LEFT_PROMPT_ELEMENTS; then
    P9K_LEFT_PROMPT_ELEMENTS=(context dir vcs)
  fi
  if ! p9k::defined P9K_RIGHT_PROMPT_ELEMENTS; then
    P9K_RIGHT_PROMPT_ELEMENTS=(status root_indicator background_jobs history time)
  fi

  # initialize colors
  autoload -U colors && colors

  # initialize timing functions
  zmodload zsh/datetime

  # Initialize math functions
  zmodload zsh/mathfunc

  # initialize hooks
  autoload -Uz add-zsh-hook

  # prepare prompts
  add-zsh-hook precmd __p9k_save_retvals
  add-zsh-hook precmd __p9k_prepare_prompts
  add-zsh-hook preexec __p9k_preexec

  # hook into chpwd for bindkey support
  chpwd_functions=(${chpwd_functions[@]} "__p9k_ch_pwd")

  zle -N __p9k_zle_keymap_select
}

###############################################################
# @description
#   This function removed PowerLevel9k hooks and resets the prompts.
##
# @noargs
##
function prompt_powerlevel9k_teardown() {
  add-zsh-hook -D precmd __p9k\*
  add-zsh-hook -D preexec __p9k\*
  # unhook from chpwd
  chpwd_functions=( "${chpwd_functions[@]//__p9k_ch_pwd/}" )
  PROMPT='%m%# '
  RPROMPT=
}
