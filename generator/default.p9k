#!/usr/bin/env zsh
# vim:ft=zsh ts=2 sw=2 sts=2 et fenc=utf-8
################################################################
# @title powerlevel9k Default Engine
# @source [powerlevel9k](https://github.com/bhilburn/powerlevel9k)
##
# @authors
#   Ben Hilburn - [@bhilburn](https://github.com/bhilburn)
#   Dominik Ritter - [@dritter](https://github.com/dritter)
#   Christo Kotze - [@onaforeignshore](https://github.com/onaforeignshore)
##
# @info
#   This file contains the default generator for the powerlevel9k project.
##

################################################################
# DEFAULT ENGINE - Synchronous
################################################################

################################################################
# Prompt Segment Constructors
#
# Methodology behind user-defined variables overwriting colors:
#     The first parameter to the segment constructors is the calling function's
#     name. From this function name, we strip the "prompt_"-prefix and
#     uppercase it. This is then prefixed with "P9K_" and suffixed
#     with either "_BACKGROUND" or "_FOREGROUND", thus giving us the variable
#     name. So each new segment is user-overwritten by a variable following
#     this naming convention.
################################################################

# The `CURRENT_BG` variable is used to remember what the last BG color used was
# when building the left-hand prompt. Because the RPROMPT is created from
# right-left but reads the opposite, this isn't necessary for the other side.
CURRENT_BG='NONE'
# `CURRENT_RIGHT_BG` does the same for the right-hand prompt.
CURRENT_RIGHT_BG='NONE'

# Global segment cache
typeset -gAh __p9k_segment_cache

p9k::set_default last_left_element_index 1
p9k::set_default P9K_WHITESPACE_BETWEEN_LEFT_SEGMENTS " "
p9k::set_default P9K_MIDDLE_WHITESPACE_OF_LEFT_SEGMENTS " "
################################################################
# @description
#   Construct a left prompt segment
##
# @args
#   $1 string Stateful name of the function that was originally invoked (mandatory).
#   $2 integer Index of the segment
#   $3 boolean Whether the segment should be joined
#   $4 string Content of the segment
#   $5 string Visual identifier (must be a key of the icons array)
##
function __p9k_left_prompt_segment() {
  local result
  local STATEFUL_NAME="${1}"
  local current_index="${2}"
  # Check if the segment should be joined with the previous one
  local joined=false
  [[ "${3}" == "true" ]] \
      && __p9k_segment_should_be_joined ${current_index} ${last_left_element_index} "$P9K_LEFT_PROMPT_ELEMENTS" && joined=true
  local content
  # Support for bold segment
  [[ -n ${4} ]] && [[ $__P9K_DATA[${STATEFUL_NAME}_BD] == true ]] && content="%B${4}%b" || content="${4}"
  local SEGMENT_ICON="${5}"

  local bg=$__P9K_DATA[${STATEFUL_NAME}_BG]
  local fg=$__P9K_DATA[${STATEFUL_NAME}_FG]

  local left_ws="$__P9K_DATA[${STATEFUL_NAME}_LEFT_LEFT_WHITESPACE]"
  local middle_ws="$__P9K_DATA[${STATEFUL_NAME}_LEFT_MIDDLE_WHITESPACE]"
  local right_ws="$__P9K_DATA[${STATEFUL_NAME}_LEFT_RIGHT_WHITESPACE]"

  if [[ ${CURRENT_BG} != 'NONE' ]]; then # not first segment
    if [[ "${bg}" != "${CURRENT_BG}" ]]; then # background colors are different
      result+="${bg}%F${CURRENT_BG#%K}"
      [[ ${joined} == false ]] && result+="$__P9K_ICONS[LEFT_SEGMENT_SEPARATOR]${left_ws}"
    else # background colors are the same
      # Middle segment with same color as previous segment
      # We take the current foreground color as color for our
      # subsegment. This should have enough contrast.
      [[ ${joined} == false ]] && result+="$__P9K_ICONS[LEFT_SUBSEGMENT_SEPARATOR]${left_ws}"
    fi
  else # First segment

    # Custom symbol for left side of the first segment and
    # custom white space that follows it
    local first_symbol=""
    local first_ws="$__P9K_DATA[FIRST_WHITESPACE]"
    if [[ -n "$P9K_LEFT_PROMPT_FIRST_SEGMENT_START_SYMBOL" ]]; then
      first_symbol="%K{${CURRENT_BG}}%F${bg#%K}$P9K_LEFT_PROMPT_FIRST_SEGMENT_START_SYMBOL"
    fi

    result+="${first_symbol}${bg}${first_ws}"
  fi

  # Print the visual identifier and content if any
  local visual_identifier
  [[ -n "${SEGMENT_ICON}" ]] && visual_identifier="$__P9K_DATA[${STATEFUL_NAME}_VI]${SEGMENT_ICON}"
  [[ -n "${content}" ]] && content="${fg}${content}"
  [[ -n "${visual_identifier}" && -n "${content}" ]] && visual_identifier="${visual_identifier}${middle_ws}"
  result+="${visual_identifier}${content}${right_ws}"

  CURRENT_BG=$bg
  last_left_element_index=$current_index

  __p9k_unsafe[left]+="${result}"
}

################################################################
# @description
#   End the left prompt, closes the final segment
##
# @noargs
##
function __p9k_left_prompt_end() {
  local result
  if [[ -n ${CURRENT_BG} ]]; then
    result+="%k%F${CURRENT_BG#%K}${__P9K_ICONS[LEFT_SEGMENT_SEPARATOR]}"
  else
    result+="%k"
  fi
  result+="%f${__P9K_ICONS[LEFT_SEGMENT_END_SEPARATOR]}"
  CURRENT_BG=''

  __p9k_unsafe[left]+="${result}"
}

p9k::set_default last_right_element_index 1
p9k::set_default last_right_element_stateful_name ""
p9k::set_default P9K_WHITESPACE_BETWEEN_RIGHT_SEGMENTS " "
p9k::set_default P9K_MIDDLE_WHITESPACE_OF_RIGHT_SEGMENTS " "
################################################################
# @description
#   Construct a right prompt segment
##
# @args
#   $1 string Stateful name of the function that was originally invoked (mandatory).
#   $2 integer Index of the segment
#   $3 boolean Whether the segment should be joined
#   $4 string Content of the segment
#   $5 string Visual identifier (must be a key of the icons array)
##
# @notes
#   No ending for the right prompt segment is needed (unlike the left prompt, above).
##
function __p9k_right_prompt_segment() {
  local result
  local STATEFUL_NAME="${1}"
  local current_index="${2}"
  # Check if the segment should be joined with the previous one
  local joined=false
  [[ "${3}" == "true" ]] && __p9k_segment_should_be_joined ${current_index} ${last_right_element_index} "$P9K_RIGHT_PROMPT_ELEMENTS" && joined=true
  local content
  # Support for bold segment
  [[ -n "${4}" ]] && [[ $__P9K_DATA[${STATEFUL_NAME}_BD] == true ]] && content="%B${4}%b" || content="${4}"
  local SEGMENT_ICON="${5}"

  local bg=$__P9K_DATA[${STATEFUL_NAME}_BG]
  local fg=$__P9K_DATA[${STATEFUL_NAME}_FG]

  local left_ws="$__P9K_DATA[${STATEFUL_NAME}_RIGHT_LEFT_WHITESPACE]"
  local middle_ws="$__P9K_DATA[${STATEFUL_NAME}_RIGHT_MIDDLE_WHITESPACE]"
  # Due to how the right prompt segments are built, we need to output
  # the whitespace of the _previous_ segment here.
  local right_ws="$__P9K_DATA[${last_right_element_stateful_name}_RIGHT_RIGHT_WHITESPACE]"

  # If CURRENT_RIGHT_BG is "NONE", we are the first right segment.
  [[ ${CURRENT_RIGHT_BG} == 'NONE' ]] || result+="${right_ws}" # print right whitespace of prev segment
  if [[ ${joined} == false ]] || [[ ${CURRENT_RIGHT_BG} == 'NONE' ]]; then
    if [[ "${bg}" != "${CURRENT_RIGHT_BG}" ]]; then
      # Use the new BG color for the foreground with separator
      result+="%F${bg#%K}${__P9K_ICONS[RIGHT_SEGMENT_SEPARATOR]}"
    else
      # Middle segment with same color as previous segment
      # We take the current foreground color as color for our
      # subsegment. This should have enough contrast.
      result+="${fg}${__P9K_ICONS[RIGHT_SUBSEGMENT_SEPARATOR]}"
    fi
  fi

  result+="${bg}${fg}"

  local visual_identifier
  if [[ -n "${SEGMENT_ICON}" ]]; then
    visual_identifier="$__P9K_DATA[${STATEFUL_NAME}_VI]${SEGMENT_ICON}%f"

    [[ "${(L)P9K_RPROMPT_ICON_LEFT}" != "true" ]] \
      && visual_identifier="${middle_ws}${visual_identifier}" \
      || visual_identifier="${visual_identifier}${middle_ws}"
  fi

  # Print whitespace only if segment is not joined or first right segment,
  # however, avoid double-printing whitespace if ${content} is empty
  [[ ${joined} == false ]] || [[ "${CURRENT_RIGHT_BG}" == "NONE" ]] && [[ -n "${content}" ]] && result+="${left_ws}"
  # Print segment content and icon, if any
  [[ "${(L)P9K_RPROMPT_ICON_LEFT}" != "true" ]] \
    && result+="${content}${visual_identifier}" \
    || result+="${visual_identifier}${fg}${content}"

  CURRENT_RIGHT_BG=${bg}
  last_right_element_index=${current_index}
  last_right_element_stateful_name=${STATEFUL_NAME}

  __p9k_unsafe[right]+="${result}"
}

################################################################
# @description
#   This function returns all information about the segment in
#   serialized form.
##
# @args
#   $1 string Name of the function that was originally invoked (mandatory)
#   $2 string State of the segment
#   $3 string Alignment (left|right)
#   $4 integer Index of the segment
#   $5 bool Whether the segment should be joined
#   $6 string Content of the segment
#   $7 string The condition - if the segment should be shown (gets evaluated)
#   $8 string Visual identifier overide - *must* be a named icon string
##
__P9K_DATA[SEGMENT_RESULT]=''
function p9k::prepare_segment() {
  local STATEFUL_NAME="${${(U)1}#PROMPT_}"
  [[ -n "${2}" ]] && STATEFUL_NAME="${STATEFUL_NAME}_${(U)2}"

  # Precompile condition.
  local shouldPrint=false
  __p9k_segment_should_be_printed "${STATEFUL_NAME}" "${7}" "${6}" && shouldPrint=true

  if ${shouldPrint}; then
    local SEGMENT_ICON
    if [[ -z "${8}" ]]; then
      SEGMENT_ICON=${__P9K_ICONS[${STATEFUL_NAME}]}
    else
      # check if it is a named icon
      SEGMENT_ICON=${__P9K_ICONS[${8}]}
      # otherwise use it literally
      [[ -z "${SEGMENT_ICON}" ]] && SEGMENT_ICON="${8}"
    fi
  fi

  __P9K_DATA[SEGMENT_RESULT]="${STATEFUL_NAME}·|·${3}·|·${4}·|·${5}·|·${6}·|·${SEGMENT_ICON}·|·${shouldPrint}"
}

################################################################
# @description
#   Helper function to enable early exit for segments.
##
# @args
#   $1 string Name of the function that was originally invoked (mandatory)
#   $2 string State of the segment
#   $3 string Alignment (left|right)
#   $4 integer Index of the segment
#   $5 bool Whether the segment should be joined
##
function p9k::segment_no_print() {
  local STATEFUL_NAME="${${(U)1}#PROMPT_}"
  [[ -n "${2}" ]] && STATEFUL_NAME="${STATEFUL_NAME}_${(U)2}"

  local alignment="${3}"
  local index="${4}"
  local joined="${5}"

  __P9K_DATA[SEGMENT_RESULT]="${STATEFUL_NAME}·|·${alignment}·|·${index}·|·${joined}·|··|··|·false"
}

################################################################
# @description
#   The `custom` prompt provides a way for users to invoke commands and display
#   the output in a segment.
##
# @args
#   $1 string left|right
#   $2 integer Segment index
#   $3 boolean Whether the segment should be joined
#   $4 string Custom segment name
##
function __p9k_prompt_custom() {
  local STATEFUL_NAME="CUSTOM_${${(U)4}}"
  local command="P9K_${STATEFUL_NAME}"
  local segment_content="$(eval ${(P)command})"

  p9k::prepare_segment "${STATEFUL_NAME}" "" "${1}" "${2}" "${3}" "${segment_content}"
}

###############################################################
# @description
#   Takes the result of the segments computation and echos it,
#   so that ZSH-Async can grab it.
##
# @args
#   $1 string The command to execute
#   $* Parameters for the command
##
function __p9k_async_wrapper() {
  local command="${1}"
  shift
  ${command} "$@"

  echo "${__P9K_DATA[SEGMENT_RESULT]}"
}

################################################################
# Prompt processing and drawing
################################################################

###############################################################
# @description
#   This function loops through the left prompt elements and calls
#   the related segment functions.
##
# @args
#   $1 string left|right
##
function __p9k_build_segment_cache() {
  local alignment="${1}"
  local segments_var="P9K_${(U)alignment}_PROMPT_ELEMENTS"
  local -a segments=(${(P)segments_var})
  [[ ${#segments} == 0 ]] && return

  local index=1
  local raw_segment joined
  for raw_segment in "${(@)segments}"; do
    # Cut off after double colon
    local segment="${raw_segment%%::*}"
    # Check if segment should be joined
    p9k::segment_is_tagged_as "joined" "${segment}" && joined=true || joined=false

    local async=false
    p9k::segment_is_tagged_as "async" "${segment}" && async=true

    # Check if it is a custom command, otherwise interpet it as
    # a prompt.
    local custom=false
    p9k::segment_is_tagged_as "custom" "${segment}" && custom=true

    local cache_key="${alignment}::${index}"

    if ${custom} && ${async}; then
      async_job "__p9k_async_worker" "__p9k_async_wrapper" "__p9k_prompt_custom" "${alignment}" "${index}" "${joined}" "${segment}"

      # Placeholder
      __p9k_segment_cache["${cache_key}"]="${segment}·|·${alignment}·|·${index}·|·${joined}·|·…·|··|·true"
    elif ${custom}; then
      __p9k_prompt_custom "${alignment}" "${index}" "${joined}" "${segment}"
      __p9k_segment_cache["${cache_key}"]="${__P9K_DATA[SEGMENT_RESULT]}"
    elif ${async}; then
      async_job "__p9k_async_worker" "__p9k_async_wrapper" "prompt_${segment}" "${alignment}" "${index}" "${joined}"

      # Placeholder
      __p9k_segment_cache["${cache_key}"]="${segment}·|·${alignment}·|·${index}·|·${joined}·|·…·|··|·true"
    else
      # TODO: Skip computation if cache is fresh for some segments?
      prompt_${segment} "${alignment}" "$index" "${joined}"
      __p9k_segment_cache["${cache_key}"]="${__P9K_DATA[SEGMENT_RESULT]}"
    fi

    index=$((index + 1))
  done
  __p9k_render
}

###############################################################
# @description
#   Refresh a single item in the cache
##
# @args
#   $1 string The serialized segment data
##
function __p9k_refresh_cache_item() {
  local -a segment_meta=("${(@s:·|·:)1}")

  __p9k_segment_cache["${segment_meta[2]}::${segment_meta[3]}"]="${1}"
}

###############################################################
# @description
#   Exchange result of prompt_<segment> function in the cache and
#   trigger re-rendering of prompt.
##
# @args
#   # $1 job name, e.g. the function passed to async_job
#   $2 return code
#   $3 resulting (stdout) output from job execution
#   $4 execution time, floating point e.g. 0.0076138973 seconds
#   $5 resulting (stderr) error output from job execution
#   $6 has next result in buffer (0 = buffer empty, 1 = yes)
##
function __p9k_async_callback() {
  local JOB="${1}" CODE="${2}" RAW_SEGMENT_DATA="${3}" EXEC_TIME="${4}" ERR="${5}" NEXT_BUFFER="${6}"

  # ignore the async evals used to alter worker environment
  if [[ "${JOB}" == "[async/eval]" ]] || \
     [[ "${JOB}" == ";" ]] || \
     [[ "${JOB}" == "[async]" ]]; then
    return
  fi

  # Exit early, if ${RAW_SEGMENT_DATA} is empty
  if [[ -z "${RAW_SEGMENT_DATA}" ]]; then
    return
  fi

  # split ${RAW_SEGMENT_DATA} into an array - see https://unix.stackexchange.com/a/28873
  local segment_meta=("${(@s:·|·:)RAW_SEGMENT_DATA}") # split on delimiter "·|·" (@s:<delim>:)
  local cache_key="${segment_meta[2]}::${segment_meta[3]}"
  __p9k_segment_cache["${cache_key}"]="${RAW_SEGMENT_DATA}"

  # Trigger re-rendering if we do not wait for other jobs
  [[ "${NEXT_BUFFER}" == "0" ]] && __p9k_render "true"
}

###############################################################
# @description
#   P9K Render function.
#   Goes through cache and renders each entry.
##
# @args
#   $1 - boolean True if rendered through ZLE widget (in async mode)
##
function __p9k_render() {
  # Resets
  CURRENT_BG='NONE'
  CURRENT_RIGHT_BG='NONE'
  PROMPT=''
  RPROMPT=''
  # __p9k_unsafe must be a global variable, because we set
  # PROMPT='$__p9k_unsafe[left]', so without letting ZSH
  # expand this value (single quotes). This is a workaround
  # to avoid double expansion of the contents of the PROMPT.
  typeset -gAh __p9k_unsafe=()

  local cache_key data
  # Process Cache
  for cache_key in "${(o@kn)__p9k_segment_cache}"; do
    data="${__p9k_segment_cache[${cache_key}]}"
    [[ -z "${data}" ]] && continue

    local -a segment_meta=("${(@s:·|·:)data}")
    [[ "${segment_meta[7]}" == "false" ]] && continue # Segment should not be printed

    local alignment="${segment_meta[2]}"
    __p9k_${alignment}_prompt_segment "${segment_meta[1]}" "${segment_meta[3]}" "${segment_meta[4]}" "${segment_meta[5]}" "${segment_meta[6]}"
  done

  # Render End of left prompt
  __p9k_left_prompt_end

  # Render End of right prompt
  # last whitespace with last segments right symbol, if any
  local last_symbol
  if p9k::defined "P9K_RIGHT_PROMPT_LAST_SEGMENT_END_SYMBOL"; then
    last_symbol="%K{none}%F${CURRENT_RIGHT_BG#%K}${P9K_RIGHT_PROMPT_LAST_SEGMENT_END_SYMBOL}"
  fi
  __p9k_unsafe[right]+="${__P9K_DATA[LAST_WHITESPACE]}${last_symbol}"

  # Render actual PROMPTS
  local LC_ALL="" LC_CTYPE="en_US.UTF-8" # Set the right locale to protect special characters

  if [[ "${P9K_PROMPT_ON_NEWLINE:-}" == true ]]; then
    __p9k_unsafe[left]="${__P9K_ICONS[MULTILINE_FIRST_PROMPT_PREFIX]}%f%b%k${__p9k_unsafe[left]}
${__P9K_ICONS[MULTILINE_LAST_PROMPT_PREFIX]}"
    if [[ "$P9K_RPROMPT_ON_NEWLINE" != true ]]; then
      # The right prompt should be on the same line as the first line of the left
      # prompt. To do so, there is just a quite ugly workaround: Before zsh draws
      # the RPROMPT, we advise it, to go one line up. At the end of RPROMPT, we
      # advise it to go one line down. See:
      # http://superuser.com/questions/357107/zsh-right-justify-in-ps1
      RPROMPT_PREFIX='%{'$'\e[1A'${P9K_RPROMPT_PREFIX:-}'%}' # one line up
      RPROMPT_SUFFIX='%{'${P9K_RPROMPT_SUFFIX:-}$'\e[1B''%}' # one line down
    else
      RPROMPT_PREFIX='%{'${P9K_RPROMPT_PREFIX:-}'%}'
      RPROMPT_SUFFIX='%{'${P9K_RPROMPT_SUFFIX:-}'%}'
    fi
  else
    __p9k_unsafe[left]="%f%b%k${__p9k_unsafe[left]}"
    RPROMPT_PREFIX='%{'${P9K_RPROMPT_PREFIX:-}'%}'
    RPROMPT_SUFFIX='%{'${P9K_RPROMPT_SUFFIX:-}'%}'
  fi

  if [[ "${P9K_DISABLE_RPROMPT:-}" != true ]]; then
    __p9k_unsafe[right]="${RPROMPT_PREFIX}%f%b%k${__p9k_unsafe[right]}%{${reset_color}%}${RPROMPT_SUFFIX}"
    RPROMPT='${__p9k_unsafe[right]}'
  fi

  # Allow iTerm integration to work
  [[ "${ITERM_SHELL_INTEGRATION_INSTALLED:-}" == "Yes" ]] \
    && __p9k_unsafe[left]="%{$(iterm2_prompt_mark)%}${__p9k_unsafe[left]}"

local NEWLINE='
'

  if [[ "${P9K_PROMPT_ADD_NEWLINE:-}" == true ]]; then
    NEWLINES=""
    repeat ${P9K_PROMPT_ADD_NEWLINE_COUNT:-1} { NEWLINES+=${NEWLINE} }
    __p9k_unsafe[left]="$NEWLINES${__p9k_unsafe[left]}"
  fi

  # By evaluating $__p9k_unsafe[left] here in __p9k_render we avoid
  # the evaluation of $PROMPT being interrupted.
  # For security $PROMPT is never set directly. This way the prompt render is
  # forced to evaluate the variable and the contents of $__p9k_unsafe[left]
  # are never executed. The same applies to $RPROMPT.
  PROMPT='${__p9k_unsafe[left]}'

  # About .reset-promt see:
  # https://github.com/sorin-ionescu/prezto/issues/1026
  # https://github.com/zsh-users/zsh-autosuggestions/issues/107#issuecomment-183824034
  [[ "${1}" == "true" ]] && zle .reset-prompt && zle -R
}

###############################################################
# @description
#   This function is a hook that runs before the command runs.
#   It sets the start timer.
##
# @noargs
##
function __p9k_preexec() {
  # The Timer is started here, but the end
  # is taken in __p9k_prepare_prompts, as this
  # method is a precmd hook and runs right
  # before the prompt gets rendered. So we
  # can calculate the duration there.
  _P9K_TIMER_START=${EPOCHREALTIME}
}

##############################################################
# @description
#   This function is a hook that is run before __p9k_prepare_prompts.
#   If sets the return value(s) that is/are used in prompt_status.
#   Since we need to get the return value of the last command, this hook
#   has to be run before __p9k_prepare_prompts does.
##
# @noargs
##
function __p9k_save_retvals() {
  RETVAL=$?
  RETVALS=( "$pipestatus[@]" )
}

p9k::set_default P9K_PROMPT_ADD_NEWLINE false
###############################################################
# @description
#   This function is a hook that is run before the prompts are created.
#   If sets all the required variables for the prompts and then
#   calls the prompt segment building functions.
##
# @noargs
##
function __p9k_prepare_prompts() {
  local RPROMPT_PREFIX RPROMPT_SUFFIX

  _P9K_COMMAND_DURATION=$((EPOCHREALTIME - _P9K_TIMER_START))

  # Reset start time
  _P9K_TIMER_START=0x7FFFFFFF

  if [[ "${__P9K_DATA[async]}" == "true" ]]; then
    # Restart worker to update the environment inside the worker
    async_stop_worker "__p9k_async_worker"
    async_start_worker "__p9k_async_worker"
    async_register_callback "__p9k_async_worker" "__p9k_async_callback"
  fi

  __p9k_build_segment_cache "left"
  __p9k_build_segment_cache "right"
}

p9k::set_default P9K_IGNORE_TERM_COLORS false
p9k::set_default P9K_IGNORE_TERM_LANG false

###############################################################
# @description
#   This function is a hook into chpwd to add bindkey support.
##
# @noargs
##
function __p9k_ch_pwd() {
  __p9k_preexec
}

###############################################################
# @description
#   This function resets the prompt using zle keymap.
##
# @noargs
##
function __p9k_zle_keymap_select () {
  zle reset-prompt
  zle -R
}

###############################################################
# @description
#   This is the main function. It does the necessary checks,
#   loads the required resources and sets the required hooks.
##
# @noargs
##
function prompt_powerlevel9k_setup() {
  # The value below was set to better support 32-bit CPUs.
  # It's the maximum _signed_ integer value on 32-bit CPUs.
  # Please don't change it until 19 January of 2038. ;)

  # Disable false display of command execution time
  _P9K_TIMER_START=0x7FFFFFFF

  # The prompt function will set these prompt_* options after the setup function
  # returns. We need prompt_subst so we can safely run commands in the prompt
  # without them being double expanded and we need prompt_percent to expand the
  # common percent escape sequences.
  prompt_opts=(cr percent sp subst)

  # Borrowed from promptinit, sets the prompt options in case the theme was
  # not initialized via promptinit.
  setopt noprompt{bang,cr,percent,sp,subst} "prompt${^prompt_opts[@]}"

  # Display a warning if the terminal does not support 256 colors
  __p9k_term_colors

  # If the terminal `LANG` is set to `C`, this theme will not work at all.
  if [[ $P9K_IGNORE_TERM_LANG == false ]]; then
      local term_lang
      term_lang=$(echo $LANG)
      if [[ ${term_lang} == 'C' ]]; then
          print -P "\t%F{red}WARNING!%f Your terminal's 'LANG' is set to 'C', which breaks this theme!"
          print -P "\t%F{red}WARNING!%f Please set your 'LANG' to a UTF-8 language, like 'en_US.UTF-8'"
          print -P "\t%F{red}WARNING!%f _before_ loading this theme in your \~\.zshrc. Putting"
          print -P "\t%F{red}WARNING!%f %F{blue}export LANG=\"en_US.UTF-8\"%f at the top of your \~\/.zshrc is sufficient."
      fi
  fi

  if ! p9k::defined P9K_LEFT_PROMPT_ELEMENTS; then
    P9K_LEFT_PROMPT_ELEMENTS=(context dir vcs)
  fi
  if ! p9k::defined P9K_RIGHT_PROMPT_ELEMENTS; then
    P9K_RIGHT_PROMPT_ELEMENTS=(status root_indicator background_jobs history time)
  fi

  # initialize colors
  autoload -U colors && colors

  # initialize timing functions
  zmodload zsh/datetime

  # Initialize math functions
  zmodload zsh/mathfunc

  # initialize hooks
  autoload -Uz add-zsh-hook

  # prepare prompts
  add-zsh-hook precmd __p9k_save_retvals
  add-zsh-hook precmd __p9k_prepare_prompts
  add-zsh-hook preexec __p9k_preexec

  # hook into chpwd for bindkey support
  chpwd_functions=(${chpwd_functions[@]} "__p9k_ch_pwd")

  zle -N __p9k_zle_keymap_select
}

###############################################################
# @description
#   This function removed PowerLevel9k hooks and resets the prompts.
##
# @noargs
##
function prompt_powerlevel9k_teardown() {
  add-zsh-hook -D precmd __p9k\*
  add-zsh-hook -D preexec __p9k\*
  # unhook from chpwd
  chpwd_functions=( "${chpwd_functions[@]//__p9k_ch_pwd/}" )
  PROMPT='%m%# '
  RPROMPT=
}
