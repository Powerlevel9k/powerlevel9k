# vim:ft=zsh ts=2 sw=2 sts=2 et fenc=utf-8
################################################################
# @title powerlevel9k Autoload Function - __p9k_truncate_path
# @sources
#   [powerlevel9k](https://github.com/bhilburn/powerlevel9k)
##
# @info
#   This file contains the __p9k_truncate_path autoload function for
#   the powerlevel9k ZSH theme.
##

setopt localoptions # extendedglob

################################################################
# @description
#   Given a directory path, truncate it according to the settings.
##
# @args
#   $1 string The directory path to be truncated.
#   $2 integer Length to truncate to.
#   $3 string Delimiter to use.
#   $4 string Where to truncate from - "right" | "middle" | "left". If omited, assumes right.
##
# @function __p9k_truncate_path() {}
# if the current path is not 1 character long (e.g. "/" or "~")
if (( ${#1} > 1 )); then
  # convert $2 from string to integer
  2=$(( $2 ))
  # set $3 to "" if not defined
  [[ -z $3 ]] && local delim="" || local delim=$(echo -n $3)
  # set $4 to "right" if not defined
  [[ -z $4 ]] && 4="right"
  # create a variable for the truncated path.
  local trunc_path
  local delim_len=${#delim}
  # if the path is in the home folder, add "~/" to the start otherwise "/"
  [[ $1 == "~"* ]] && trunc_path='~/' || trunc_path='/'
  # split the path into an array using "/" as the delimiter
  local paths=$1
  paths=(${(s:/:)${paths//"~\/"/}})
  # declare locals for the directory being tested and its length
  local test_dir test_dir_length threshold last_pos
  # do the needed truncation
  case $4 in
    right)
      # include the delimiter length in the threshold
      threshold=$(( $2 + ${delim_len} ))
      # loop through the paths
      for (( i=1; i<${#paths}; i++ )); do
        # get the current directory value
        test_dir=$paths[$i]
        test_dir_length=${#test_dir}
        # only truncate if the resulting truncation will be shorter than
        # the truncation + delimiter length and at least 3 characters
        if (( ${test_dir_length} > ${threshold} )) && (( ${test_dir_length} > 3 )); then
          # use the first $2 characters and the delimiter
          trunc_path+="${test_dir:0:$2}${delim}/"
        else
          # use the full path
          trunc_path+="${test_dir}/"
        fi
      done
    ;;
    middle)
      # we need double the length for start and end truncation + delimiter length
      threshold=$(( $2 * 2 ))
      # loop through the paths
      for (( i=1; i<${#paths}; i++ )); do
        # get the current directory value
        test_dir=$paths[$i]
        test_dir_length=${#test_dir}
        # only truncate if the resulting truncation will be shorter than
        # the truncation + delimiter length
        if (( ${test_dir_length} > ${threshold} )); then
          # use the first $2 characters, the delimiter and the last $2 characters
          last_pos=$(( ${test_dir_length} - $2 ))
          trunc_path+="${test_dir:0:$2}${delim}${test_dir:$last_pos:$test_dir_length}/"
        else
          # use the full path
          trunc_path+="${test_dir}/"
        fi
      done
    ;;
    left)
      # include the delimiter length in the threshold
      threshold=$(( $2 + ${delim_len} ))
      # loop through the paths
      for (( i=1; i<${#paths}; i++ )); do
        # get the current directory value
        test_dir=$paths[$i]
        test_dir_length=${#test_dir}
        # only truncate if the resulting truncation will be shorter than
        # the truncation + delimiter length and at least 3 characters
        if (( ${test_dir_length} > ${threshold} )) && (( ${test_dir_length} > 3 )); then
          # use the delimiter and the last $2 characters
          last_pos=$(( ${test_dir_length} - $2 ))
          trunc_path+="${delim}${test_dir:$last_pos:$test_dir_length}/"
        else
          # use the full path
          trunc_path+="${test_dir}/"
        fi
      done
    ;;
esac
  # return the truncated path + the current directory
  echo $trunc_path${1:t}
else # current path is 1 character long (e.g. "/" or "~")
  echo $1
fi
