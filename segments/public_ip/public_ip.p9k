# vim:ft=zsh ts=2 sw=2 sts=2 et fenc=utf-8
################################################################
# @title powerlevel9k Segment - Public IP
# @source [powerlevel9k](https://github.com/bhilburn/powerlevel9k)
##

(){
  # Set the right locale to protect special characters
  local LC_ALL="" LC_CTYPE="en_US.UTF-8"
  ################################################################
  # Register segment
  # Parameters:
  #   segment_name  context  background  foreground  Generic  Flat/Awesome-Patched  Awesome-FontConfig  Awesome-Mapped-FontConfig  NerdFont
  #                                                                                                                               
  p9k::register_segment "PUBLIC_IP" "" "$DEFAULT_COLOR" "$DEFAULT_COLOR_INVERTED"  ''  ''  ''  '\u'${CODEPOINT_OF_AWESOME_GLOBE}  $'\uF0AC'

  ################################################################
  # Register segment icon
  # Parameters:
  #   name_of_icon  Generic  Flat/Awesome-Patched  Awesome-FontConfig  Awesome-Mapped-FontConfig  NerdFont
  #                                                                                            
  p9k::register_icon "VPN_ICON"  '(vpn)'  '(vpn)'  $'\uF023'  '\u'${CODEPOINT_OF_AWESOME_LOCK}  $'\uF023'

  ################################################################
  # Register segment default values
  p9k::set_default P9K_PUBLIC_IP_TIMEOUT "00"
  p9k::set_default P9K_PUBLIC_IP_NONE ""
  p9k::set_default P9K_PUBLIC_IP_FILE "/tmp/p9k_public_ip"
  p9k::set_default P9K_PUBLIC_IP_HOST "http://ident.me"
  p9k::defined P9K_PUBLIC_IP_METHODS || P9K_PUBLIC_IP_METHODS=(dig curl wget)
}

# On macOS, stat is in /usr/bin/stat. However, if gnu utils are installed, this won't work.
[[ $(which stat) == "/usr/bin/stat" ]] && local stat_version="OSX"

################################################################
# Public IP segment
# Parameters:
#   * $1 Alignment: string - left|right
#   * $2 Index: integer
#   * $3 Joined: bool - If the segment should be joined
prompt_public_ip() {
  # Do we need a fresh IP?
  local refresh_ip=false
  if [[ -f $P9K_PUBLIC_IP_FILE ]]; then
    typeset -i timediff
    # if saved IP is more than
    if [[ "$stat_version" == "OSX" ]]; then
      timediff=$(($(date +%s) - $(stat -f "%m" $P9K_PUBLIC_IP_FILE)))
    else
      timediff=$(($(date +%s) - $(date -r $P9K_PUBLIC_IP_FILE +%s)))
    fi
    [[ ${timediff} -gt $P9K_PUBLIC_IP_TIMEOUT ]] && refresh_ip=true
    # If tmp file is empty get a fresh IP
    [[ -z $(cat $P9K_PUBLIC_IP_FILE) ]] && refresh_ip=true
    [[ -n $P9K_PUBLIC_IP_NONE ]] && [[ $(cat $P9K_PUBLIC_IP_FILE) =~ "$P9K_PUBLIC_IP_NONE" ]] && refresh_ip=true
  else
    touch $P9K_PUBLIC_IP_FILE && refresh_ip=true
  fi

  # grab a fresh IP if needed
  local fresh_ip
  if [[ ${refresh_ip} =~ true && -w $P9K_PUBLIC_IP_FILE ]]; then
    for method in "${P9K_PUBLIC_IP_METHODS[@]}"; do
      case ${method} in
        'dig')
            fresh_ip="$(dig +time=1 +tries=1 +short myip.opendns.com @resolver1.opendns.com 2> /dev/null)"
            [[ "$fresh_ip" =~ ^\; ]] && unset fresh_ip
          ;;
        'curl')
            fresh_ip="$(curl --max-time 10 -w '\n' "$P9K_PUBLIC_IP_HOST" 2> /dev/null)"
          ;;
        'wget')
            fresh_ip="$(wget -T 10 -qO- "$P9K_PUBLIC_IP_HOST" 2> /dev/null)"
          ;;
      esac
      # If we found a fresh IP, break loop.
      if [[ -n "${fresh_ip}" ]]; then
        break;
      fi
    done

    # write IP to tmp file or clear tmp file if an IP was not retrieved
    # Redirection with `>!`. From the manpage: Same as >, except that the file
    #   is truncated to zero length if it exists, even if CLOBBER is unset.
    # If the file already exists, and a simple `>` redirection and CLOBBER
    # unset, ZSH will produce an error.
    [[ -n "${fresh_ip}" ]] && echo ${fresh_ip} >! $P9K_PUBLIC_IP_FILE || echo $P9K_PUBLIC_IP_NONE >! $P9K_PUBLIC_IP_FILE
  fi

  # read public IP saved to tmp file
  local public_ip="$(cat $P9K_PUBLIC_IP_FILE)"

  # Draw the prompt segment
  if [[ -n ${public_ip} ]]; then
    local icon=''

    # TODO: Where is this variable actually set?

    # Check VPN is on if VPN interface is set
    if [[ -n $P9K_PUBLIC_IP_VPN_INTERFACE ]]; then
      for vpn_iface in $(/sbin/ifconfig | grep -e ^"$P9K_PUBLIC_IP_VPN_INTERFACE" | cut -d":" -f1)
      do
        icon="VPN_ICON"
        break
      done
    fi
    p9k::prepare_segment "$0" "" $1 "$2" $3 "${public_ip}" "" "$icon"
  fi
}
