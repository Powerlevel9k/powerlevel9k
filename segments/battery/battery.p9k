# vim:ft=zsh ts=2 sw=2 sts=2 et fenc=utf-8
################################################################
# @title powerlevel9k Segment - Battery
# @source [powerlevel9k](https://github.com/bhilburn/powerlevel9k)
##

(){
  # Set the right locale to protect special characters
  local LC_ALL="" LC_CTYPE="en_US.UTF-8"
  ################################################################
  # Register segment
  # Parameters:
  #   segment_name  context  background  foreground  Generic  Flat/Awesome-Patched  Awesome-FontConfig  Awesome-Mapped-FontConfig  NerdFont
  #                                                                                                ðŸ”‹          î¢”          ðŸ”‹            ï‰€                                        ï‰€
  p9k::register_segment "BATTERY" "LOW"           "${DEFAULT_COLOR}" "red"                        $'\U1F50B'  $'\uE894'  $'\U1F50B'  '\u'${CODEPOINT_OF_AWESOME_BATTERY_FULL}  $'\uF240 '
  p9k::register_segment "BATTERY" "CHARGING"      "${DEFAULT_COLOR}" "yellow"                     $'\U1F50B'  $'\uE894'  $'\U1F50B'  '\u'${CODEPOINT_OF_AWESOME_BATTERY_FULL}  $'\uF240 '
  p9k::register_segment "BATTERY" "CHARGED"       "${DEFAULT_COLOR}" "green"                      $'\U1F50B'  $'\uE894'  $'\U1F50B'  '\u'${CODEPOINT_OF_AWESOME_BATTERY_FULL}  $'\uF240 '
  p9k::register_segment "BATTERY" "DISCONNECTED"  "${DEFAULT_COLOR}" "${DEFAULT_COLOR_INVERTED}"  $'\U1F50B'  $'\uE894'  $'\U1F50B'  '\u'${CODEPOINT_OF_AWESOME_BATTERY_FULL}  $'\uF240 '

  ################################################################
  # Register segment default values
  p9k::set_default P9K_BATTERY_LOW_THRESHOLD 10
  # Default behavior: Be verbose!
  p9k::set_default P9K_BATTERY_VERBOSE true
}

################################################################
# @description
#   Displays the battery statys in levels and colors.
##
# @args
#   $1 string Alignment - left | right
#   $2 integer Segment index
#   $3 boolean Whether the segment should be joined
#   $4 Root Prefix: string - Root prefix for testing purposes
##
prompt_battery() {
  local ROOT_PREFIX="${4}"
  # The battery can have four different states - default to 'unknown'.
  local current_state='unknown'

  if [[ $__P9K_OS =~ OSX && -f "${ROOT_PREFIX}"/usr/bin/pmset && -x "${ROOT_PREFIX}"/usr/bin/pmset ]]; then
    # obtain battery information from system
    # split lines into an array
    local raw_data=("${(@f)$(${ROOT_PREFIX}/usr/bin/pmset -g batt)}")
    # use only second line
    raw_data=${raw_data[2]}
    # return if there is no battery on system
    [[ ! $raw_data =~ "InternalBattery" ]] && return

    # Time remaining on battery operation (charging/discharging)
    local tstring=${${(s: :)${${(s:; :)raw_data}[3]}}[1]}
    # If time has not been calculated by system yet
    [[ $tstring =~ '(\(no|not)' ]] && tstring="..."

    # percent of battery charged
    typeset -i 10 bat_percent
    [[ "${raw_data}" =~ "([0-9]+)%" ]] && bat_percent="${match[1]}"

    local remain=""
    # Logic for string output
    case "${${(s:; :)raw_data}[2]}" in
      # for a short time after attaching power, status will be 'AC attached;'
      'charging'|'finishing charge'|'AC attached')
        current_state="charging"
        remain=" ($tstring)"
      ;;
      'discharging')
        [[ $bat_percent -lt $P9K_BATTERY_LOW_THRESHOLD ]] && current_state="low" || current_state="disconnected"
        remain=" ($tstring)"
      ;;
      *)
        current_state="charged"
      ;;
    esac
  fi

  if [[ "$__P9K_OS" == 'Windows' ]]; then
    # https://docs.microsoft.com/ru-ru/windows/desktop/CIMWin32Prov/win32-battery

    # skip empty lines AND empty values, leave only meaningful key=value pairs
    local raw_data="$(${ROOT_PREFIX}wmic Path Win32_Battery Get /format:list)"

    # type bat_percent: percent as int in range 0..100
    local bat_percent
    [[ "${raw_data}" =~ "EstimatedChargeRemaining=([0-9]+)" ]] && bat_percent="${match[1]}"

    local minutes_remaining
    [[ "${raw_data}" =~ "EstimatedRunTime=([0-9]+)" ]] && minutes_remaining="${match[1]}"
    local tstring="..."
    if [[ "$minutes_remaining" =~ "[[:digit:]]+" ]]; then
      local hours=$(( minutes_remaining / 60 ))
      local minutes=$(( minutes_remaining % 60 ))

      # Pad minutes with zeroes
      minutes="${(l:2::0:)minutes}"
      tstring="${hours}:${minutes}"
    fi
    local remain=" ($tstring)"

    local current_state=''
    local battery_status
    [[ "${raw_data}" =~ "BatteryStatus=([0-9]+)" ]] && battery_status="${match[1]}"

    case "$battery_status" in
      1) current_state='disconnected';;
      2) current_state='charging';;  # Unknown status, stats still may be available
      3) current_state='charged';;
      4 | 5) current_state='low';;
      6 | 7 | 8 | 9 | 11) current_state='charging';;
      10 | *) return;;
    esac
  fi

  if [[ "$__P9K_OS" == 'Linux' ]] || [[ "$__P9K_OS" == 'Android' ]]; then
    # needed if files or directory do not match globbing pattern
    local sysp="${ROOT_PREFIX}/sys/class/power_supply"
    local -a bats
    bats=( $sysp/(BAT*|battery)(N) )
    [[ ${#bats} == 0 ]] && return

    local energy_now="0"
    local energy_full="0"
    local power_now="0"
    local battery_status_full=true
    local battery_status_calculating=false
    local battery_status_charging=false
    for bat in $bats; do
      # skip this loop if no files in $bat
      local -a bat_files
      bat_files=( $bat/*(N) )
      [[ ${#bat_files} == 0 ]] && continue
      # add "+ 0[number in file]" if the file exists (0 padding if glob fails)
      local -a energy_now_files
      local -a energy_full_files
      local -a power_now_files
      local -a battery_status_files
      energy_now_files=( $bat/(energy|charge)_now(N) )
      energy_now+="+ 0$(<${energy_now_files[1]:-/dev/null})"
      energy_full_files=( $bat/(energy|charge)_full(N) )
      energy_full+="+ 0$(< ${energy_full_files[1]:-/dev/null})"
      power_now_files=( $bat/(power|current)_now(N) )
      power_now+="+ 0$(< ${power_now_files[1]:-/dev/null})"
      # get cumulative battery status (ignore if no status file exists)
      battery_status_files=( $bat/status(N) )
      local battery_status=$(<${battery_status_files[1]:-/dev/null})
      [[ ${battery_status} != Full && -n ${battery_status} ]] \
        && battery_status_full=false
      [[ ${battery_status} == Charging ]] \
        && battery_status_charging=true
      [[ $(< ${power_now_files[1]:-/dev/null}) == 0 && ${battery_status} == (Charging|Discharging) ]] \
        && battery_status_calculating=true
    done

    # replace values of varibales with evaluation of the sums
    energy_now=$(($energy_now))
    energy_full=$(($energy_full))
    power_now=$(($power_now))

    local capacity=$(( 100 * $energy_now / $energy_full ))
    [[ $capacity -gt 100 ]] \
      && local bat_percent=100 \
      || local bat_percent=$capacity
    [[ $battery_status_full == true || $battery_status_charging == true ]] \
      && local connected=true

    if [[ -z $connected ]]; then
      [[ $bat_percent -lt $P9K_BATTERY_LOW_THRESHOLD ]] \
        && current_state="low" \
        || current_state="disconnected"
    else
      [[ $bat_percent =~ 100 ]] && current_state="charged"
      [[ $bat_percent -lt 100 ]] && current_state="charging"
    fi

    # calculate (dis)charging time
    if [[ $battery_status_full == true ]]; then
      # ignore full case (this just keeps a flat if structure)
    elif [[ $power_now > 0 ]]; then
      local tstring
      if [[ $battery_status_charging == true ]]; then
        tstring=$(( 60 * ($energy_full - $energy_now) / $power_now ))
      else
        tstring=$(( 60 * $energy_now / $power_now ))
      fi
      # format to h:mm
      tstring="$(($tstring/60)):${(l#2##0#)$(($tstring%60))}"
    elif [[ $battery_status_calculating == true ]]; then
      tstring="..."
    fi
    [[ -n $tstring ]] && local remain=" ($tstring)"
  fi

  # return if P9K_BATTERY_HIDE_ABOVE_THRESHOLD is set and the battery percentage is greater or equal
  if p9k::defined P9K_BATTERY_HIDE_ABOVE_THRESHOLD && [[ "${bat_percent}" -ge $P9K_BATTERY_HIDE_ABOVE_THRESHOLD ]]; then
    return
  fi

  local message
  if [[ "$P9K_BATTERY_VERBOSE" == true ]]; then
    message="$bat_percent%%$remain"
  else
    message="$bat_percent%%"
  fi

  # override default icon if we are using battery stages
  local overideIcon="" overideBg="" segment
  declare -i offset
  if [[ -n "$P9K_BATTERY_STAGES" ]] && [[ -n "$P9K_BATTERY_LEVEL_BACKGROUND" ]]; then
    # override default icon if we are using battery stages
    if [[ -n "$P9K_BATTERY_STAGES" ]]; then
      segment=$(( 100.0 / (${#P9K_BATTERY_STAGES} - 1 ) ))
      if [[ ${segment} > 1 ]]; then
        offset=$(( (${bat_percent} / $segment) ))
        # check if the stages are in an array or a string
        [[ "${(t)P9K_BATTERY_STAGES}" =~ "array" ]] && overideIcon="$P9K_BATTERY_STAGES[$offset]" || overideIcon="${P9K_BATTERY_STAGES:$offset:1}"
      fi
    fi

    # override the default color if we are using a color level array
    if [[ -n "$P9K_BATTERY_LEVEL_BACKGROUND" ]] && [[ "${(t)P9K_BATTERY_LEVEL_BACKGROUND}" =~ "array" ]]; then
      segment=$(( 100.0 / (${#P9K_BATTERY_LEVEL_BACKGROUND} - 1 ) ))
      offset=$(( (${bat_percent} / $segment) + 1 ))
      overideBg="$(p9k::background_color ${P9K_BATTERY_LEVEL_BACKGROUND[$offset]})"
    fi
  fi
  unset offset
  # Draw the prompt_segment
  p9k::prepare_segment "$0" "${(U)current_state}" $1 "$2" $3 "${message}" "" "${overideIcon}" "${overideBg}"
}
