# vim:ft=zsh ts=2 sw=2 sts=2 et fenc=utf-8
################################################################
# @title powerlevel9k Segment - VCS
# @source [powerlevel9k](https://github.com/bhilburn/powerlevel9k)
##

################################################################
# From: http://zsh.sourceforge.net/Doc/Release/User-Contributions.html#Version-Control-Information
#
# formats & actionformats
# -----------------------
# In normal formats and actionformats the following replacements are done:
#
# %s  The VCS in use (git, hg, svn, etc.).
# %b  Information about the current branch.
# %a  An identifier that describes the action. Only makes sense in actionformats.
# %i  The current revision number or identifier. For hg the hgrevformat style may be used to customize the output.
# %c  The string from the stagedstr style if there are staged changes in the repository.
# %u  The string from the unstagedstr style if there are unstaged changes in the repository.
# %R  The base directory of the repository.
# %r  The repository name. If %R is /foo/bar/repoXY, %r is repoXY.
# %S  A subdirectory within a repository. If ${PWD} is /foo/bar/repoXY/beer/tasty, %S is beer/tasty.
# %m  A "misc" replacement. It is at the discretion of the backend to decide what this replacement expands to.
#     The hg and git backends use this expando to display patch information. hg sources patch information from the mq extensions; git from in-progress rebase and cherry-pick operations and from the stgit extension. The patch-format and nopatch-format styles control the generated string. The former is used when at least one patch from the patch queue has been applied, and the latter otherwise.
#     The hg backend displays bookmark information in this expando (in addition to mq information). See the get-mq and get-bookmarks styles. Both of these styles may be enabled at the same time. If both are enabled, both resulting strings will be shown separated by a semicolon (that cannot currently be customized).
#     The quilt ‘standalone’ backend sets this expando to the same value as the %Q expando.
# %Q  Quilt series information. When quilt is used (either in ‘addon’ mode or as a ‘standalone’ backend), this expando is set to quilt series’ patch-format string. The set-patch-format hook and nopatch-format style are honoured.
#
# In branchformat these replacements are done:
#
# %b  The branch name.
# %r  The current revision number or the hgrevformat style for hg.
#
# In hgrevformat these replacements are done:
#
# %r  The current local revision number.
# %h  The current global revision identifier.
#
# In patch-format and nopatch-format these replacements are done:
#
# %p  The name of the top-most applied patch (applied-string).
# %u  The number of unapplied patches (unapplied-string).
# %n  The number of applied patches.
# %c  The number of unapplied patches.
# %a  The number of all patches.
# %g  The names of active mq guards (hg backend).
# %G  The number of active mq guards (hg backend).
#
# Not all VCS backends have to support all replacements. For nvcsformats no replacements are performed at all, it is just a string.
#
# set-message
# -----------
# Called each time before a ‘vcs_info_msg_N_’ message is set. It takes two arguments; the first being the ‘N’ in the message variable name, the second is the currently configured formats or actionformats.
# There are a number of ‘hook_com’ keys, that are used here: ‘action’, ‘branch’, ‘base’, ‘base-name’, ‘subdir’, ‘staged’, ‘unstaged’, ‘revision’, ‘misc’, ‘vcs’ and one ‘miscN’ entry for each backend-specific data field (N starting at zero). They are set to the values figured out so far by vcs_info and any change will be used directly when the actual replacement is done.
# Since this hook is triggered multiple times (once for each configured formats or actionformats), each of the ‘hook_com’ keys mentioned above (except for the miscN entries) has an ‘_orig’ counterpart, so even if you changed a value to your liking you can still get the original value in the next run. Changing the ‘_orig’ values is probably not a good idea.
# If ret is set to non-zero, the string in ${hook_com[message]} will be used unchanged as the message by vcs_info.
#
# Oddities
# --------
# If you want to use the %b (bold off) prompt expansion in formats, which expands %b itself, use %%b. That will cause the vcs_info expansion to replace %%b with %b, so that zsh’s prompt expansion mechanism can handle it. Similarly, to hand down %b from branchformat, use %%%%b. Sorry for this inconvenience, but it cannot be easily avoided. Luckily we do not clash with a lot of prompt expansions and this only needs to be done for those.
################################################################

################################################################
# Initialize all the required VCS_INFO hooks / helper functions
################################################################

(){
  # Set the right locale to protect special characters
  local LC_ALL="" LC_CTYPE="en_US.UTF-8"
  ################################################################
  # Register segment helper icons
  # Parameters:
  #   name_of_icon  Generic  Flat/Awesome-Patched  Awesome-FontConfig  Awesome-Mapped-FontConfig  NerdFont
  #                                          ●                                                                                  
  p9k::register_icon "VCS_UNSTAGED"          $'\u25CF'   $'\uE17C'   $'\uF06A'   '\u'${CODEPOINT_OF_AWESOME_EXCLAMATION_CIRCLE}    $'\uF06A'
  #                                          ✚                                                                                  
  p9k::register_icon "VCS_STAGED"            $'\u271A'   $'\uE168'   $'\uF055'   '\u'${CODEPOINT_OF_AWESOME_PLUS_CIRCLE}           $'\uF055'
  #                                          ⍟                                                                                  
  p9k::register_icon "VCS_STASH"             $'\u235F'   $'\uE133 '  $'\uF01C '  '\u'${CODEPOINT_OF_AWESOME_INBOX}' '              $'\uF01C '
  #                                          ↓                                                                                  
  p9k::register_icon "VCS_INCOMING_CHANGES"  $'\u2193'   $'\uE131 '  $'\uF01A '  '\u'${CODEPOINT_OF_AWESOME_ARROW_CIRCLE_DOWN}' '  $'\uF01A '
  #                                          ↑                                                                                  
  p9k::register_icon "VCS_OUTGOING_CHANGES"  $'\u2191'   $'\uE132 '  $'\uF01B '  '\u'${CODEPOINT_OF_AWESOME_ARROW_CIRCLE_UP}' '    $'\uF01B '
  #                                                                                                                             
  p9k::register_icon "VCS_TAG"               ''          $'\uE817 '  $'\uF217 '  '\u'${CODEPOINT_OF_AWESOME_TAG}' '                $'\uF02B '
  #                                          ☿                                                                                  
  p9k::register_icon "VCS_BOOKMARK"          $'\u263F'   $'\uE87B'   $'\uF27B'   '\u'${CODEPOINT_OF_OCTICONS_BOOKMARK}             $'\uF461 '
  #                                                                                                                             
  p9k::register_icon "VCS_COMMIT"            ''          $'\uE821 '  $'\uF221 '  '\u'${CODEPOINT_OF_OCTICONS_GIT_COMMIT}' '        $'\uE729 '
  #                                                                                                                             
  p9k::register_icon "VCS_CLOBBERED_FOLDER"  ''          $'\uE818'   $'\uF115'   '\u'${CODEPOINT_OF_AWESOME_FOLDER_O}              $'\uF115'
  #                                          ✘           ✘           ✘                                                            
  p9k::register_icon "VCS_ERROR"             $'\u2718'   $'\u2718'   $'\u2718'   '\u'${CODEPOINT_OF_AWESOME_TIMES}                 $'\uF00D'

  # Hide branch icon if user wants it hidden
  if [[ "${P9K_VCS_HIDE_BRANCH_ICON}" != true ]]; then
    if [[ ${P9K_MODE} != 'compatible' ]]; then
      #                                                                                                                         
      p9k::register_icon "VCS_BRANCH"        $'\uE0A0 '  $'\uE220 '  $'\uF126 '  '\u'${CODEPOINT_OF_OCTICONS_GIT_BRANCH}' '        $'\uF126 '
    else
      #                                                                                                                         
      p9k::register_icon "VCS_BRANCH"        "@ "        $'\uE220 '  $'\uF126 '  '\u'${CODEPOINT_OF_OCTICONS_GIT_BRANCH}' '        $'\uF126 '
    fi
  fi

  #                                          →           →          →                                                            
  p9k::register_icon "VCS_REMOTE_BRANCH"     $'\u2192'   $'\u2192'   $'\u2192'   '\u'${CODEPOINT_OF_OCTICONS_REPO_PUSH}            $'\uE728 '
  #                                                                                                                             
  p9k::register_icon "VCS_GIT"               ''          $'\uE20E '  $'\uF1D3 '  '\u'${CODEPOINT_OF_AWESOME_GIT}' '                $'\uF1D3 '
  #                                                                                                                              
  p9k::register_icon "VCS_GIT_GITHUB"        ''          $'\uE20E '  $'\uF113 '  '\u'${CODEPOINT_OF_AWESOME_GITHUB_ALT}' '         $'\uF113 '
  #                                                                                                                              
  p9k::register_icon "VCS_GIT_BITBUCKET"     ''          $'\uE20E '  $'\uF171 '  '\u'${CODEPOINT_OF_AWESOME_BITBUCKET}' '          $'\uE703 '
  #                                                                                                                              
  p9k::register_icon "VCS_GIT_GITLAB"        ''          $'\uE20E '  $'\uF296 '  '\u'${CODEPOINT_OF_AWESOME_GITLAB}' '             $'\uF296 '
  #                                                                                                                             
  p9k::register_icon "VCS_HG"                ''          $'\uE1C3 '  $'\uF0C3 '  '\u'${CODEPOINT_OF_AWESOME_FLASK}' '              $'\uF0C3 '
  #                                                                                                                                
  p9k::register_icon "VCS_SVN"               ''          '(svn) '    '(svn) '    '(svn) '                                          $'\uE72D '

  ################################################################
  # Define the actual segment
  ################################################################

  ################################################################
  # Register segment
  # Parameters:
  #   segment_name  context  background  foreground  Generic  Flat/Awesome-Patched  Awesome-FontConfig  Awesome-Mapped-FontConfig  NerdFont
  p9k::register_segment  "VCS" "CLEAN"     "green"  "${DEFAULT_COLOR}" ''  ''  ''  ''  ''
  p9k::register_segment  "VCS" "MODIFIED"  "yellow" "${DEFAULT_COLOR}" ''  ''  ''  ''  ''
  #                                                                                                                                     
  p9k::register_segment  "VCS" "UNTRACKED" "green"  "${DEFAULT_COLOR}" '?' $'\uE16C' $'\uF059' '\u'${CODEPOINT_OF_AWESOME_QUESTION_CIRCLE} $'\uF059'
  p9k::register_segment  "VCS" "CLOBBERED" "red"    "${DEFAULT_COLOR}" ''  ''  ''  ''  ''

  ################################################################
  # Register segment default values
  p9k::set_default P9K_VCS_ACTIONFORMAT_FOREGROUND "red"
  p9k::set_default P9K_VCS_HIDE_TAGS false
  p9k::set_default P9K_VCS_INTERNAL_HASH_LENGTH "8" # Default: Just display the first 8 characters of our changeset-ID.
  p9k::set_default P9K_VCS_DIR_SHORTEN_DELIMITER $'\U2026'
  p9k::set_default P9K_VCS_SHOW_SUBMODULE_DIRTY true
  p9k::set_default P9K_VCS_GIT_ALWAYS_SHOW_REMOTE_BRANCH false
  p9k::set_default P9K_VCS_SHOW_CHANGESET false
}

function +vi-git-untracked() {
  [[ -z "${vcs_comm[gitdir]}" || "${vcs_comm[gitdir]}" == "." ]] && return

  # get the root for the current repo or submodule
  local repoTopLevel="$(command git rev-parse --show-toplevel 2> /dev/null)"
  # dump out if we're outside a git repository (which includes being in the .git folder)
  [[ $? != 0 || -z $repoTopLevel ]] && return

  local untrackedFiles=$(command git ls-files --others --exclude-standard "${repoTopLevel}" 2> /dev/null)

  if [[ -z $untrackedFiles && "$P9K_VCS_SHOW_SUBMODULE_DIRTY" == "true" ]]; then
    untrackedFiles+=$(command git submodule foreach --quiet --recursive 'command git ls-files --others --exclude-standard' 2> /dev/null)
  fi

  [[ -z $untrackedFiles ]] && return

  hook_com[unstaged]+=" ${__P9K_ICONS[VCS_UNTRACKED]}"
  VCS_WORKDIR_HALF_DIRTY=true
}

function +vi-git-aheadbehind() {
  local ahead behind
  local -a gitstatus

  # for git prior to 1.7
  # ahead=$(command git rev-list origin/${hook_com[branch]}..HEAD | wc -l)
  ahead=$(command git rev-list --count "${hook_com[branch]}"@{upstream}..HEAD 2>/dev/null)
  (( ahead )) && gitstatus+=( " ${__P9K_ICONS[VCS_OUTGOING_CHANGES]}${ahead// /}" )

  # for git prior to 1.7
  # behind=$(command git rev-list HEAD..origin/${hook_com[branch]} | wc -l)
  behind=$(command git rev-list --count HEAD.."${hook_com[branch]}"@{upstream} 2>/dev/null)
  (( behind )) && gitstatus+=( " ${__P9K_ICONS[VCS_INCOMING_CHANGES]}${behind// /}" )

  hook_com[misc]+=${(j::)gitstatus}
}

function +vi-git-remotebranch() {
  local remote
  local branch_name="${hook_com[branch]}"

  # Are we on a remote-tracking branch?
  remote=${$(command git rev-parse --verify HEAD@{upstream} --symbolic-full-name 2>/dev/null)/refs\/(remotes|heads)\/}

  if [[ -n "$P9K_VCS_SHORTEN_LENGTH" ]] && [[ -n "$P9K_VCS_SHORTEN_MIN_LENGTH" ]]; then
    p9k::set_default P9K_VCS_SHORTEN_DELIMITER $'\u2026'

    if [ ${#hook_com[branch]} -gt ${P9K_VCS_SHORTEN_MIN_LENGTH} ] && [ ${#hook_com[branch]} -gt ${P9K_VCS_SHORTEN_LENGTH} ]; then
      case "$P9K_VCS_SHORTEN_STRATEGY" in
        truncate_middle)
          hook_com[branch]="${branch_name:0:$P9K_VCS_SHORTEN_LENGTH}${P9K_VCS_SHORTEN_DELIMITER}${branch_name: -$P9K_VCS_SHORTEN_LENGTH}"
        ;;
        truncate_from_right)
          hook_com[branch]="${branch_name:0:$P9K_VCS_SHORTEN_LENGTH}${P9K_VCS_SHORTEN_DELIMITER}"
        ;;
      esac
    fi
  fi

  hook_com[branch]="${__P9K_ICONS[VCS_BRANCH]}${hook_com[branch]//\%/%%}"
  # Always show the remote
  #if [[ -n ${remote} ]] ; then
  # Only show the remote if it differs from the local
  if [[ -n ${remote} \
      && ( \
        "${P9K_VCS_GIT_ALWAYS_SHOW_REMOTE_BRANCH}" == 'true' \
        || "${remote#*/}" != "${branch_name#heads/}" \
      ) ]]; then
    hook_com[branch]+="${__P9K_ICONS[VCS_REMOTE_BRANCH]}${${remote// /}//\%/%%}"
  fi
}

function +vi-git-gitdir() {
    if (( $+GIT_DIR )); then
        local gitdir="$GIT_DIR"
        local icon="${__P9K_ICONS[VCS_CLOBBERED_FOLDER]}"

        local inner
        () {
            # See if current working directory is a shadowed repository
            local GIT_DIR GIT_WORK_TREE
            inner=$(command git rev-parse --verify HEAD 2> /dev/null)
        }

        if [[ -n $inner && $inner != "$(command git rev-parse --verify HEAD 2> /dev/null)" ]]; then
            # GIT_DIR is shadowing a different repo. This can be
            # very confusing! Flag to alert.
            VCS_WORKDIR_CLOBBERED=true
            icon="${__P9K_ICONS[VCS_ERROR]} $icon"
        fi

        hook_com[branch]="$icon $gitdir ${hook_com[branch]}"
    fi
}

p9k::set_default P9K_VCS_HIDE_TAGS false
function +vi-git-tagname() {
  if [[ "$P9K_VCS_HIDE_TAGS" == "false" ]]; then
    # If we are on a tag, append the tagname to the current branch string.
    local tag
    tag=$(command git describe --tags --exact-match HEAD 2>/dev/null)

    if [[ -n "${tag}" ]] ; then
      # There is a tag that points to our current commit. Need to determine if we
      # are also on a branch, or are in a DETACHED_HEAD state.
      if [[ -z $(command git symbolic-ref HEAD 2>/dev/null) ]]; then
        # DETACHED_HEAD state. We want to append the tag name to the commit hash
        # and print it. Unfortunately, `vcs_info` blows away the hash when a tag
        # exists, so we have to manually retrieve it and clobber the branch
        # string.
        local revision
        revision=$(command git rev-list -n 1 --abbrev-commit --abbrev=${P9K_VCS_INTERNAL_HASH_LENGTH} HEAD)
        hook_com[branch]="${__P9K_ICONS[VCS_BRANCH]}${revision} ${__P9K_ICONS[VCS_TAG]}${tag//\%/%%}"
      else
        # We are on both a tag and a branch; print both by appending the tag name.
        hook_com[branch]+=" ${__P9K_ICONS[VCS_TAG]}${tag//\%/%%}"
      fi
    fi
  fi
}

# Show count of stashed changes
# Port from https://github.com/whiteinge/dotfiles/blob/5dfd08d30f7f2749cfc60bc55564c6ea239624d9/.zsh_shouse_prompt#L268
function +vi-git-stash() {
  if [[ -s "${vcs_comm[gitdir]}/logs/refs/stash" ]] ; then
    local -a stashes=( "${(@f)"$(<${vcs_comm[gitdir]}/logs/refs/stash)"}" )
    hook_com[misc]+=" ${__P9K_ICONS[VCS_STASH]}${#stashes}"
  fi
}

function +vi-hg-bookmarks() {
  if [[ -n "${hgbmarks[@]}" ]]; then
    hook_com[hg-bookmark-string]=" ${__P9K_ICONS[VCS_BOOKMARK]}${hgbmarks[@]}"

    # To signal that we want to use the sting we just generated, set the special
    # variable `ret' to something other than the default zero:
    ret=1
    return 0
  fi
}

function +vi-vcs-detect-changes() {
  if [[ -n "${hook_com[staged]}" ]] || [[ -n "${hook_com[unstaged]}" ]]; then
    VCS_WORKDIR_DIRTY=true
  else
    VCS_WORKDIR_DIRTY=false
  fi
}

function +vi-vcs-icon() {
  local remote
  if [[ "${hook_com[vcs]}" == "git" ]]; then
    remote=$(command git ls-remote --get-url 2> /dev/null)
    vcs_segment_icon=${__P9K_ICONS[VCS_GIT]}
  elif [[ "${hook_com[vcs]}" == "hg" ]]; then
    remote=$(command hg paths default)
    vcs_segment_icon=${__P9K_ICONS[VCS_HG]}
  elif [[ "${hook_com[vcs]}" == "svn" ]]; then
    remote="${svninfo[URL]}" # Set by VCS_INFO
    vcs_segment_icon=${__P9K_ICONS[VCS_SVN]}
  fi

  if [[ "$remote" =~ "github" ]] then
    vcs_segment_icon=${__P9K_ICONS[VCS_GIT_GITHUB]}
  elif [[ "$remote" =~ "bitbucket" ]] then
    vcs_segment_icon=${__P9K_ICONS[VCS_GIT_BITBUCKET]}
  elif [[ "$remote" =~ "stash" ]] then
    vcs_segment_icon=${__P9K_ICONS[VCS_GIT_BITBUCKET]}
  elif [[ "$remote" =~ "gitlab" ]] then
    vcs_segment_icon=${__P9K_ICONS[VCS_GIT_GITLAB]}
  fi
}

function +vi-svn-detect-changes() {
  declare -a svn_status
  svn_status=( "${(@f)$(svn status)}" )
  if [[ "${(M)#svn_status:#\?*}" -gt 0 ]]; then
    hook_com[unstaged]+=" ${__P9K_ICONS[VCS_UNTRACKED]}"
    VCS_WORKDIR_HALF_DIRTY=true
  fi
  if [[ "${(M)#svn_status:#M*}" -gt 0 ]]; then
    hook_com[unstaged]+=" ${__P9K_ICONS[VCS_UNSTAGED]}"
    VCS_WORKDIR_DIRTY=true
  fi
  if [[ "${(M)#svn_status:#A*}" -gt 0 ]]; then
    hook_com[staged]+=" ${__P9K_ICONS[VCS_STAGED]}"
    VCS_WORKDIR_DIRTY=true
  fi
  unset svn_status
}

function +vi-hg-branch() {
  hook_com[branch]="${hook_com[branch]//\%/%%}"
}

################################################################
# @description
#   Initializes the VCS segment by setting the required ZSH options.
##
# @noargs
##
# @note
#   This function is only called once.
##
__p9k_vcs_init() {
  if [[ -n "${P9K_VCS_CHANGESET_HASH_LENGTH}" ]]; then
    P9K_VCS_INTERNAL_HASH_LENGTH="${P9K_VCS_CHANGESET_HASH_LENGTH}"
  fi

  # Load VCS_INFO
  autoload -Uz vcs_info

  VCS_WORKDIR_DIRTY=false
  VCS_WORKDIR_HALF_DIRTY=false

  VCS_CHANGESET_PREFIX=''
  if [[ "${P9K_VCS_SHOW_CHANGESET}" == true ]]; then
    VCS_CHANGESET_PREFIX="${__P9K_ICONS[VCS_COMMIT]}%0.${P9K_VCS_INTERNAL_HASH_LENGTH}i "
  fi

  # Show number of applied patches. This is used during merges and rebases
  # %c number of unapplied patches | %n number of applied patched | %a number of all patches
  zstyle ':vcs_info:*' patch-format ' %n/%a'

  # Load supported version control backends
  zstyle ':vcs_info:*' enable git hg svn

  # If enabled, this style causes the %c and %u format escapes to show when the working directory has uncommitted changes. The strings displayed by these escapes can be controlled via the stagedstr and unstagedstr styles. The only backends that currently support this option are git, hg, and bzr (the latter two only support unstaged).
  zstyle ':vcs_info:*' check-for-changes true

  # A list of formats, used when actionformats is not used (which is most of the time).
  VCS_DEFAULT_FORMAT="${VCS_CHANGESET_PREFIX}%b%c%u%m"
  zstyle ':vcs_info:*' formats "${VCS_DEFAULT_FORMAT}"

  # A list of formats, used if there is a special action going on in your current repository; like an interactive rebase or a merge conflict.
  zstyle ':vcs_info:*' actionformats "%b $(p9k::foreground_color ${P9K_VCS_ACTIONFORMAT_FOREGROUND})| %a%m%f"

  # This string will be used in the %c escape if there are staged changes in the repository.
  zstyle ':vcs_info:*' stagedstr " ${__P9K_ICONS[VCS_STAGED]}"

  # This string will be used in the %u escape if there are unstaged changes in the repository.
  zstyle ':vcs_info:*' unstagedstr " ${__P9K_ICONS[VCS_UNSTAGED]}"

  # Hooks are places in vcs_info where you can run your own code. That code can communicate with the code that called it and through that, change the system’s behaviour.
  # For configuration, hooks change the style context:
  #   :vcs_info:vcs-string+hook-name:user-context:repo-root-name
  p9k::defined P9K_VCS_GIT_HOOKS || P9K_VCS_GIT_HOOKS=(vcs-detect-changes vcs-icon git-untracked git-aheadbehind git-stash git-remotebranch git-gitdir git-tagname)
  zstyle ':vcs_info:git*+set-message:*' hooks ${P9K_VCS_GIT_HOOKS}
  p9k::defined P9K_VCS_HG_HOOKS || P9K_VCS_HG_HOOKS=(vcs-detect-changes vcs-icon hg-branch)
  zstyle ':vcs_info:hg*+set-message:*' hooks ${P9K_VCS_HG_HOOKS}
  p9k::defined P9K_VCS_SVN_HOOKS || P9K_VCS_SVN_HOOKS=(vcs-detect-changes vcs-icon svn-detect-changes)
  zstyle ':vcs_info:svn*+set-message:*' hooks ${P9K_VCS_SVN_HOOKS}

  # For Hg, only show the branch name
  zstyle ':vcs_info:hg*:*' branchformat "${__P9K_ICONS[VCS_BRANCH]}%b"

  # The `get-revision` function must be turned on for dirty-check to work for Hg
  # The revision of a repository’s work tree (currently for the git and hg backends, where this kind of information is not always vital). For git, the hash value of the currently checked out commit is available via the %i expansion. With hg, the local revision number and the corresponding global hash are available via %i.
  zstyle ':vcs_info:hg*:*' get-revision true

  # If set to true, the hg backend will try to get a list of current bookmarks. They will be available via the ‘%m’ replacement.
  # The default is to generate a comma-separated list of all bookmark names that refer to the currently checked out revision. If a bookmark is active, its name is suffixed an asterisk and placed first in the list.
  zstyle ':vcs_info:hg*:*' get-bookmarks true
  zstyle ':vcs_info:hg*+gen-hg-bookmark-string:*' hooks hg-bookmarks

  # For svn, only
  zstyle ':vcs_info:svn*:*' formats "${VCS_CHANGESET_PREFIX}%b%c%u"
  zstyle ':vcs_info:svn*:*' actionformats "${VCS_CHANGESET_PREFIX}%c%u $(p9k::foreground_color ${P9K_VCS_ACTIONFORMAT_FOREGROUND})| %a%f"

  if [[ "${P9K_VCS_SHOW_CHANGESET}" == true ]]; then
    zstyle ':vcs_info:*' get-revision true
  fi
}

################################################################
# @description
#   Display the current VCS information.
##
# @args
#   ${1} string Alignment - left | right
#   ${2} integer Segment index
#   ${3} boolean Whether the segment should be joined
##
prompt_vcs() {
  VCS_WORKDIR_CLOBBERED=false
  VCS_WORKDIR_DIRTY=false
  VCS_WORKDIR_HALF_DIRTY=false
  local current_state=""

  # Actually invoke vcs_info manually to gather all information.
  vcs_info
  local vcs_prompt="${vcs_info_msg_0_}"

  if [[ -n "${vcs_prompt}" ]]; then
    if [[ "${VCS_WORKDIR_CLOBBERED}" == true ]]; then
      current_state='clobbered'
    elif [[ "${VCS_WORKDIR_DIRTY}" == true ]]; then
      current_state='modified'
    else
      if [[ "${VCS_WORKDIR_HALF_DIRTY}" == true ]]; then
        current_state='untracked'
      else
        current_state='clean'
      fi
    fi
    p9k::prepare_segment ${0} ${current_state} ${1} "${2}" ${3} "${vcs_prompt}" "" "${vcs_segment_icon}"
  fi
}

################################################################
# initialize the helper functions.
#   This is done at the end to ensure that all settings are defined before
#   runnint the helpers.
__p9k_vcs_init
