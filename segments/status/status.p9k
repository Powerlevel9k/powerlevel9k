# vim:ft=zsh ts=2 sw=2 sts=2 et fenc=utf-8
################################################################
# @title powerlevel9k Segment - Status
# @source [powerlevel9k](https://github.com/bhilburn/powerlevel9k)
##

(){
  # Set the right locale to protect special characters
  local LC_ALL="" LC_CTYPE="en_US.UTF-8"
  ################################################################
  # Register segment
  # Parameters:
  #   segment_name  context  background  foreground  Generic  Flat/Awesome-Patched  Awesome-FontConfig  Awesome-Mapped-FontConfig  NerdFont
  #                                                                      ✔         ✔          ✔                                            
  p9k::register_segment "STATUS" "OK"       "$DEFAULT_COLOR" "green"    $'\u2714'  $'\u2714'  $'\u2714'  '\u'${CODEPOINT_OF_AWESOME_CHECK}  $'\uF00C'
  #                                                                      ✘          ✘         ✘                                             
  p9k::register_segment "STATUS" "ERROR"    "$DEFAULT_COLOR" "red"      $'\u2718'  $'\u2718'  $'\u2718'  '\u'${CODEPOINT_OF_AWESOME_TIMES}  $'\uF00D'
  #                                                                      ↵         ↵         ↵          ↵                                 ↵
  p9k::register_segment "STATUS" "ERROR_CR" "red"            "yellow1"  $'\u21B5'  $'\u21B5'  $'\u21B5'  $'\u21B5'                          $'\u21B5'

  ################################################################
  # Register segment default values
  #
  # Status: When an error occur, return the error code, or a cross icon if option is set
  # Display an ok icon when no error occur, or hide the segment if option is set to false
  #
  p9k::set_default P9K_STATUS_CROSS false
  p9k::set_default P9K_STATUS_HIDE_SIGNAME false
  p9k::set_default P9K_STATUS_OK true
  p9k::set_default P9K_STATUS_SHOW_PIPESTATUS true
  # old options, retro compatibility
  p9k::set_default P9K_STATUS_OK_IN_NON_VERBOSE false
  p9k::set_default P9K_STATUS_VERBOSE true
}

exit_code_or_status() {
  local ec=$1
  if [[ "$P9K_STATUS_HIDE_SIGNAME" = true ]]; then
    echo "$ec"
  elif (( ec <= 128 )); then
    echo "$ec"
  else
    local sig=$(( ec - 128 ))
    local idx=$(( sig + 1 ))
    echo "SIG${signals[$idx]}(${sig})"
  fi
}

prompt_status() {
  local ec_text
  local ec_sum
  local ec

  if [[ $P9K_STATUS_SHOW_PIPESTATUS == true ]]; then
    if (( $#RETVALS > 1 )); then
      ec_text=$(exit_code_or_status "${RETVALS[1]}")
      ec_sum=${RETVALS[1]}
    else
      ec_text=$(exit_code_or_status "${RETVAL}")
      ec_sum=${RETVAL}
    fi

    for ec in "${(@)RETVALS[2,-1]}"; do
      ec_text="${ec_text}|$(exit_code_or_status "$ec")"
      ec_sum=$(( $ec_sum + $ec ))
    done
  else
    # We use RETVAL instead of the right-most RETVALS item because
    # PIPE_FAIL may be set.
    ec_text=$(exit_code_or_status "${RETVAL}")
    ec_sum=${RETVAL}
  fi

  if (( ec_sum > 0 )); then
    if [[ "$P9K_STATUS_CROSS" == false && "$P9K_STATUS_VERBOSE" == true ]]; then
      p9k::prepare_segment "$0" "ERROR_CR" $1 "$2" $3 "$ec_text" "[[ true ]]"
    else
      p9k::prepare_segment "$0" "ERROR" $1 "$2" $3 "" "[[ true ]]"
    fi
  elif [[ "$P9K_STATUS_OK" == true ]] && [[ "$P9K_STATUS_VERBOSE" == true || "$P9K_STATUS_OK_IN_NON_VERBOSE" == true ]]; then
    p9k::prepare_segment "$0" "OK" $1 "$2" $3  "" "[[ true ]]"
  fi
}
