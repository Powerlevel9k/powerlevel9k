# vim:ft=zsh ts=2 sw=2 sts=2 et fenc=utf-8
################################################################
# @title powerlevel9k Segment - Dir Writable
# @source [powerlevel9k](https://github.com/bhilburn/powerlevel9k)
##

() {
  # Set the right locale to protect special characters
  local LC_ALL="" LC_CTYPE="en_US.UTF-8"
  ################################################################
  # Register segment
  # Parameters:
  #   segment_name  context  background  foreground  Generic  Flat/Awesome-Patched  Awesome-FontConfig  Awesome-Mapped-FontConfig  NerdFont
  #                                                                                                                                     
  p9k::register_segment "DIR" 'DEFAULT'         "blue" "$DEFAULT_COLOR"   ''         $'\uE818'  $'\uF115'  '\u'${CODEPOINT_OF_AWESOME_FOLDER_O}     $'\uF115'
  #                                                                                                                                     
  p9k::register_segment "DIR" 'HOME'            "blue" "$DEFAULT_COLOR"   ''         $'\uE12C'  $'\uF015'  '\u'${CODEPOINT_OF_AWESOME_HOME}         $'\uF015'
  #                                                                                                                                     
  p9k::register_segment "DIR" 'HOME_SUBFOLDER'  "blue" "$DEFAULT_COLOR"   ''         $'\uE18D'  $'\uF07C'  '\u'${CODEPOINT_OF_AWESOME_FOLDER_OPEN}  $'\uF07C'
  #                                                                                                                                     
  p9k::register_segment "DIR" 'NOT_WRITABLE'    "blue" "$DEFAULT_COLOR"   $'\uE0A2'  $'\uE138'  $'\uF023'  '\u'${CODEPOINT_OF_AWESOME_LOCK}         $'\uF023'
  #                                                                                                                                   ⚙
  p9k::register_segment "DIR" 'ETC'             "blue" "$DEFAULT_COLOR"   $'\uE82F'  $'\uF013 ' $'\uF013'  '\u'${CODEPOINT_OF_AWESOME_COG}' '       $'\u2699'

  p9k::set_default P9K_DIR_PATH_SEPARATOR "/"
  p9k::set_default P9K_DIR_HOME_FOLDER_ABBREVIATION "~"
  p9k::set_default P9K_DIR_PATH_HIGHLIGHT_BOLD false
  p9k::set_default P9K_DIR_PATH_ABSOLUTE false
  p9k::set_default P9K_DIR_SHORTEN_DELIMITER "\u2026"
  p9k::set_default P9K_DIR_SHORTEN_FOLDER_MARKER ".shorten_folder_marker"
  # Parse the 'name' from the package.json; if there are any problems, just
  # print the file path
  p9k::defined P9K_DIR_PACKAGE_FILES || P9K_DIR_PACKAGE_FILES=(package.json composer.json .git)
}

################################################################
# @description
#   Display information about the current working directory.
##
# @args
#   $1 string Alignment - left | right
#   $2 integer Segment index
#   $3 boolean Whether the segment should be joined
##
prompt_dir() {
  [[ $P9K_GENERATOR == "zsh-async" && -n $4 ]] && cd $4
  local -a paths
  # using ${PWD} instead of "$(print -P '%~')" to allow use of P9K_DIR_PATH_ABSOLUTE
  local current_path=${PWD} # WAS: local current_path="$(print -P '%~')"
  local pathPrefix
  [[ ${current_path} == "${HOME}"* ]] && pathPrefix="~/" || pathPrefix="/"

  # check if the user wants to use absolute paths or "~" paths
  [[ ${(L)P9K_DIR_PATH_ABSOLUTE} != "true" ]] && current_path=${current_path/#$HOME/"~"}

  # declare all local variables
  local directory test_dir test_dir_length trunc_path threshold
  # if we are not in "~" or "/", split the paths into an array and exclude "~"
  (( ${#current_path} > 1 )) && paths=(${(s:/:)${current_path//"~\/"/}}) || paths=()
  # only run the code if SHORTEN_DIR_LENGTH is set, or we are using the two strategies that don't rely on it.
  if (( ${#current_path} > 1 )) && [[ -n "$P9K_DIR_SHORTEN_LENGTH" || "$P9K_DIR_SHORTEN_STRATEGY" == "truncate_with_folder_marker" || "$P9K_DIR_SHORTEN_STRATEGY" == "truncate_to_last" || "$P9K_SHORTEN_STRATEGY" == "truncate_with_package_name" || "$P9K_DIR_SHORTEN_STRATEGY" == "truncate_to_unique" ]]; then
    case "$P9K_DIR_SHORTEN_STRATEGY" in
      truncate_from_right)
        # truncate characters from the right of the path
        current_path=$(__p9k_truncate_path "$current_path" $P9K_DIR_SHORTEN_LENGTH "$P9K_DIR_SHORTEN_DELIMITER")
      ;;
      truncate_middle)
        # truncate characters from the middle of the path
        current_path=$(__p9k_truncate_path "$current_path" $P9K_DIR_SHORTEN_LENGTH "$P9K_DIR_SHORTEN_DELIMITER" "middle")
      ;;
      truncate_from_left)
        # truncate characters from the left of the path
        current_path=$(__p9k_truncate_path "$current_path" $P9K_DIR_SHORTEN_LENGTH "$P9K_DIR_SHORTEN_DELIMITER" "left")
      ;;
      truncate_absolute|truncate_absolute_chars)
        # truncate all characters except the last P9K_DIR_SHORTEN_LENGTH characters
        if [ ${#current_path} -gt $(( $P9K_DIR_SHORTEN_LENGTH + ${#P9K_DIR_SHORTEN_DELIMITER} )) ]; then
          current_path=$P9K_DIR_SHORTEN_DELIMITER${current_path:(-P9K_DIR_SHORTEN_LENGTH)}
        fi
      ;;
      truncate_to_last)
        # truncate all characters before the current directory
        current_path=${current_path##*/}
      ;;
      truncate_to_first_and_last)
        if (( ${#current_path} > 1 )) && (( ${P9K_DIR_SHORTEN_LENGTH} > 0 )); then
          threshold=$(( ${P9K_DIR_SHORTEN_LENGTH} * 2))
          # if we are in "~", add it back into the paths array
          [[ ${current_path} == '~'* ]] && paths=("~" "${paths[@]}")
          if (( ${#paths} > ${threshold} )); then
            local num=$(( ${#paths} - ${P9K_DIR_SHORTEN_LENGTH} ))
            # repace the middle elements
            for (( i=$P9K_DIR_SHORTEN_LENGTH; i<$num; i++ )); do
              paths[$i+1]=$P9K_DIR_SHORTEN_DELIMITER
            done
            current_path="${pathPrefix}${(j:/:)paths}"
          fi
        fi
      ;;
      truncate_to_unique)
        # for each parent path component find the shortest unique beginning
        # characters sequence. Source: https://stackoverflow.com/a/45336078
        if (( ${#current_path} > 1 )); then # root and home are exceptions and won't have paths
          # cheating here to retain ~ as home folder
          local home_path="$(__p9k_get_unique_path $HOME:A)"
          trunc_path="$(__p9k_get_unique_path $PWD:A)"
          current_path="${pathPrefix}${trunc_path//${home_path}/}"
        fi
      ;;
      truncate_with_folder_marker)
        if (( ${#paths} > 0 )); then # root and home are exceptions and won't have paths, so skip this
          # Search for the folder marker in the parent directories and
          # buildup a pattern that is removed from the current path
          # later on.
          local -a markedFolders
          markedFolders=( $(__p9k_upsearch $P9K_DIR_SHORTEN_FOLDER_MARKER) )
          if (( ${#markedFolders} > 0 )); then
            # Take the first match. This is the longest one.
            local markedFolder="${markedFolders[1]}"
            # We want to remove up to the matched parent folder
            markedFolder="${markedFolder:h}"
            # Remove $HOME from it. This has to be done, as the truncated
            # path may be prefixed by a tilde, and we cannot resolve the
            # current path softly without symlinks.
            markedFolder=${markedFolder//$HOME/"~"}
            local shortenedFolder="${current_path#${markedFolder}*}"
            current_path="${pathPrefix}${P9K_DIR_SHORTEN_DELIMITER}${current_path#${markedFolder}*}"
          fi
        fi
      ;;
      truncate_with_package_name)
        # Search for the folder marker in the parent directories and
        # buildup a pattern that is removed from the current path
        # later on.
        local -a markedFolders
        markedFolders=( $(__p9k_upsearch "(${(j:|:)P9K_DIR_PACKAGE_FILES})") )
        local package_path="${markedFolders[1]}"
        [[ ${(L)P9K_DIR_PATH_ABSOLUTE} != "true" ]] && package_path=${package_path/$HOME/"~"}

        # Replace the shortest possible match of the marked folder from
        # the current path. Remove the amount of characters up to the
        # folder marker from the left. Count only the visible characters
        # in the path (this is done by the "zero" pattern; see
        # http://stackoverflow.com/a/40855342/5586433).
        local zero='%([BSUbfksu]|([FB]|){*})'
        # Then, find the length of the package_path string, and save the
        # subdirectory path as a substring of the current directory's path from 0
        # to the length of the package path's string
        subdirectory_path=$(__p9k_truncate_path "${current_path:${#${(S%%)package_path//$~zero/}}}" $P9K_DIR_SHORTEN_LENGTH $P9K_DIR_SHORTEN_DELIMITER)

        local pkgFile
        for file in "${P9K_DIR_PACKAGE_FILES[@]}"; do
          if [[ -f "${package_path}/${file}" ]]; then
            pkgFile="${package_path}/${file}"
            break;
          fi
        done

        if [ -f "${pkgFile}" ]; then
          local packageName=$(jq '.name' ${pkgFile} 2> /dev/null \
            || node -e 'console.log(require(process.argv[1]).name);' ${pkgFile} 2>/dev/null \
            || cat "${pkgFile}" 2> /dev/null | grep -m 1 "\"name\"" | awk -F ':' '{print $2}' | awk -F '"' '{print $2}' 2>/dev/null \
            )
          if [[ -n "${packageName}" ]]; then
            # Instead of printing out the full path, print out the name of the package
            # from the package.json and append the current subdirectory
            current_path="`echo ${packageName} | tr -d '"'`$subdirectory_path"
          fi
        elif [ -n "${package_path}" ] && [ -n "${P9K_DIR_SHORTEN_GIT_FALLBACK}" ]; then
          local repo_name
          if [ -n "${P9K_DIR_SHORTEN_GIT_FALLBACK_USE_REMOTE}" ]; then
            repo_name="${${$(command git config --get remote."${P9K_DIR_SHORTEN_GIT_FALLBACK_REMOTE_NAME-origin}".url):t}%.git}"
          fi
          [ -z "${repo_name}" ] && repo_name="${package_path:t}"
          [ -n "${repo_name}" ] && current_path="${repo_name}${subdirectory_path}"
        fi
      ;;
      *)
        current_path="$(print -P "%$(($P9K_DIR_SHORTEN_LENGTH+1))(c:$P9K_DIR_SHORTEN_DELIMITER/:)%${P9K_DIR_SHORTEN_LENGTH}c")"
      ;;
    esac
  fi

  # We are escaping % with %% here, to protect directories that contain a percent sign.
  # This has to be done manually, because just quoting does not work (with the quoting
  # flag "(q)").
  current_path="${current_path//\%/%%}"

  # save state of path for highlighting and bold options
  local path_opt=$current_path

  local state_path="${PWD:A}"
  local current_state="DEFAULT"
  # added '/private/etc' for macOS compatibility
  if [[ ${state_path} == '/etc'* || ${state_path} == '/private/etc'* ]]; then
    current_state='ETC'
  elif [[ "${P9K_DIR_SHOW_WRITABLE}" == true && ! -w "$PWD" ]]; then
    current_state="NOT_WRITABLE"
  elif [[ ${state_path} == "${HOME}" ]]; then
    current_state="HOME"
  elif [[ ${state_path} == "${HOME}"* ]]; then
    current_state="HOME_SUBFOLDER"
  fi

  # declare variables used for bold and state colors
  local bld_on="" bld_off="" dir_state_foreground dir_state_user_foreground
  # test if user wants the last directory printed in bold
  if [[ "${(L)P9K_DIR_PATH_HIGHLIGHT_BOLD}" == "true" ]]; then
    bld_on="%B"
    bld_off="%b"
  fi
  # determine is the user has set a last directory color
  local dir_state_user_foreground=P9K_DIR_${current_state}_FOREGROUND
  local dir_state_foreground=$(p9k::foreground_color ${(P)dir_state_user_foreground})
  # if the user foreground is an empty string, p9k::foreground_color will return "%f" (reset foreground color)
  [[ ${dir_state_foreground} == "%f" ]] && dir_state_foreground=${__P9K_DATA[DIR_${current_state}_FG]}

  local dir_name base_name
  # Split current_path into an array again (*sigh*).
  local -a dirs=(${(s:/:)path_opt})
  # First part up to the second last
  dir_name="${(j:/:)dirs[1, -2]}"
  # Last part
  base_name="${dirs[-1]}"
  # Reset current_path
  current_path=""

  # If neither dir_name nor base_name is set, we are in the root folder.
  # We set base_name instead of dir_name here, to keep the opportunity
  # to make the dir name bold or highlight it.
  [[ -z "${dir_name}" && -z "${base_name}" ]] && base_name="/"
  # If there are dir parts, append them to current_path with a trailing
  # slash.
  [[ -n "${dir_name}" ]] && current_path+="${dir_name}/"

  # if the user wants the last directory colored...
  if [[ -n ${P9K_DIR_PATH_HIGHLIGHT_FOREGROUND} ]]; then
    local dir_path_highlight_foreground="$(p9k::foreground_color ${P9K_DIR_PATH_HIGHLIGHT_FOREGROUND})"
    current_path+="${bld_on}${dir_path_highlight_foreground}${base_name}${bld_off}"
  else # no coloring
    current_path+="${bld_on}${base_name}${bld_off}"
  fi

  # If the original path started with a slash, we need to prepend the
  # current_path with that slash.
  [[ "${base_name}" != "/" && "${path_opt[1]}" == '/' ]] && current_path="/${current_path}"

  # check if we need to omit the first character and only do it if we are not in "~" or "/"
  if [[ "${P9K_DIR_OMIT_FIRST_CHARACTER}" == "true" && ${path_opt} != "/" && ${path_opt} != "~" ]]; then
    current_path="${current_path[2,-1]}"
  fi

  # check if the user wants the separator colored.
  if [[ -n ${P9K_DIR_PATH_SEPARATOR_FOREGROUND} && ${path_opt} != "/" ]]; then
    local dir_path_separator_foreground=$(p9k::foreground_color ${P9K_DIR_PATH_SEPARATOR_FOREGROUND})
    # because this contains color changing codes, it is easier to set a variable for what should be replaced
    local repl="${dir_path_separator_foreground}/${dir_state_foreground}"
    # escape the / with a \
    current_path=${current_path//\//${repl}}
  fi

  if [[ "${P9K_DIR_PATH_SEPARATOR}" != "/" && ${path_opt} != "/" ]]; then
    current_path=${current_path//\//${P9K_DIR_PATH_SEPARATOR}}
  fi

  if [[ "${P9K_DIR_HOME_FOLDER_ABBREVIATION}" != "~" && ! "${(L)P9K_DIR_OMIT_FIRST_CHARACTER}" == "true" ]]; then
    # use :s to only replace the first occurance
    current_path=${current_path:s/~/${P9K_DIR_HOME_FOLDER_ABBREVIATION}}
  fi

  p9k::prepare_segment "$0" "${(U)current_state}" $1 "$2" $3 "${current_path}"
}
